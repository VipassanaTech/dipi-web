<?php
use PhpAmqpLib\Connection\AMQPStreamConnection;
use PhpAmqpLib\Message\AMQPMessage;
use PhpAmqpLib\Exchange\AMQPExchangeType;

require_once 'vendor/autoload.php';
use Mailgun\Mailgun;

include_once(dirname(__FILE__)."/inc/centre.inc");
include_once(dirname(__FILE__)."/inc/pdf.inc");
include_once(dirname(__FILE__)."/inc/letters.inc");
include_once(dirname(__FILE__)."/inc/zero-day.inc");
include_once(dirname(__FILE__)."/inc/course.inc");
include_once(dirname(__FILE__)."/inc/application.inc");
include_once(dirname(__FILE__)."/inc/search.inc");
include_once(dirname(__FILE__)."/inc/reports.inc");
include_once(dirname(__FILE__)."/inc/referral.inc");
include_once(dirname(__FILE__)."/inc/at-schedule.inc");
include_once dirname(__FILE__) . "/inc/center-dashboard.inc";
include_once dirname(__FILE__) . "/inc/dana-s3.inc";
include_once dirname(__FILE__) . "/inc/seating.inc";
include_once dirname(__FILE__) . "/inc/bulk-mail.inc";



function dh_manageapp_help($path, $arg)
{
	$output = '';
	switch ($path)
	{
    case "admin/help#dh_manageapp":
		$output = '<p>'.  t("Provides functionality to manage the life cycle of an applicant in a Vipassana Course") .'</p>';
		break;
	}
	return $output;
}

function dh_manageapp_init()
{
	drupal_add_js(drupal_get_path('module', 'dh_manageapp').'/js/jquery.loading.min.js');
	drupal_add_css(drupal_get_path('module', 'dh_manageapp').'/css/jquery.loading.min.css');
}

function dh_manageapp_permission()
{
	$perms['access manageapp'] = array('title' => t('Access ManageApp') ) ;
	$perms['administer manageapp'] = array('title' => t('Administer ManageApp module') ) ;
	$perms['access manageapp settings'] = array('title' => t('Access ManageApp System Settings') ) ;
	$perms['access user mapping'] = array('title' => t('Access User Mapping') ) ;
	$perms['access all centres'] = array('title' => t('Access All Centres') ) ;
	$perms['access zero day'] = array('title' => t('Access Zero Day Module') ) ;
	$perms['access centre'] = array('title' => t('Access Centre Details') ) ;
	$perms['access centre settings'] = array('title' => t('Access Centre Settings') ) ;
	$perms['access course'] = array('title' => t('Access Course Module') ) ;
	$perms['manage course'] = array('title' => t('Manage Courses') ) ;
	$perms['add application'] = array('title' => t('Add Application') ) ;
	$perms['edit application'] = array('title' => t('Edit Application') ) ;
	$perms['delete application'] = array('title' => t('Delete Application') ) ;
	$perms['access application pdf'] = array('title' => t('Access PDF of applicant') ) ;
	$perms['access application photos'] = array('title' => t('Access Photos of applicant') ) ;
	$perms['change status'] = array('title' => t('Change Application Status') ) ;
	$perms['transfer course'] = array('title' => t('Transfer to Course') ) ;
	$perms['manage letters'] = array('title' => t('Manage Letters') ) ;
	$perms['access daily activity'] = array('title' => t('Access Daily Activity'));
	$perms['access male'] = array('title' => t('Access Male Applications'));
	$perms['access female'] = array('title' => t('Access Female Applications'));
	$perms['r-at review'] = array('title' => t('View Applications with status R-ATReview') ) ;
	$perms['a-at review'] = array('title' => t('View Applications with status A-ATReview') ) ;
	$perms['export data'] = array('title' => t('Ability to Export data as PDF/Excel'));
	$perms['view teachers list'] = array('title' => t('Access Teachers List'));
	$perms['received applications block'] = array('title' => t('View Received Applications Block'));
	$perms['upcoming courses block'] = array('title' => t('View Upcoming Courses Block'));
	$perms['mass mail'] = array('title' => t('Send mass mails'));
	$perms['at scheduling'] = array('title' => t('AT Scheduling'));
	$perms['view referral list'] = array('title' => t('View referral list'));
  $perms['add referral list'] = array('title' => t('add referral list'));
	$perms['manage referral list'] = array('title' => t('Manage referral list'));
	$perms['delete referral list'] = array('title' => t('Delete referral list'));
	$perms['view center referral list'] = array('title' => t('View center referral list'));
	$perms['manage center referral list'] = array('title' => t('Manage center referral list'));
	$perms['delete center referral list'] = array('title' => t('Delete center referral list'));
	$perms['access other center courses'] = array('title' => t('Access other center course list'));
	$perms['view sms report'] = array('title' => t('View SMS report'));
	$perms['view course report'] = array('title' => t('View Course report'));
	$perms['access webhook'] = array('title' => t('Allow Webhook'));
  $perms['view finalize report'] = array('title' => t('View Finalize Report'));

	
 	$perms['access center dashboard'] = array('title' => t('Access Center Dashboard'));
    $perms['access all center dashboard'] = array('title' => t('Access All Center Dashboard'));

	return $perms;
}

function dh_manageapp_menu()
{
    $items['admin/dh_manageapp'] = array( 'title' => t('Manage Applicant Settings'),
           'page arguments' => array('dh_manageapp_admin_form'),
           'page callback' => 'drupal_get_form',
           'access arguments' => array('administer manageapp'));

    $items['manage-course/%centre_id'] = array('title' => t('Manage Courses'),
	       'page callback' => 'dh_manage_courses',
	       'access arguments' => array('manage course'),
	       'type' => MENU_CALLBACK);

    $items['course/%centre_id/%course_id'] = array('title' => t('Manage Course'),
	       'page callback' => 'dh_manage_courses_main',
	       'access arguments' => array('access course'),
	       'type' => MENU_CALLBACK);

    $items['course/get-types'] = array('title' => t('Course Types'),
	       'page callback' => 'dh_get_course_types',
	       'access arguments' => array('access course'),
	       'type' => MENU_CALLBACK);

    $items['course/handler/%centre_id'] = array('title' => t('Manage Courses'),
	       'page callback' => 'dh_manage_course_handler',
	       'access arguments' => array('manage course'),
	       'type' => MENU_CALLBACK);

    $items['centre'] = array('title' => t('Manage Centre'),
	       'page callback' => 'dh_manage_centre',
	       'access arguments' => array('access centre'),
	       'type' => MENU_CALLBACK);

    $items['centre/%centre_id'] = array('title' => t('Manage Centre'),
	       'page callback' => 'dh_manage_centre',
	       'access arguments' => array('access centre'),
	       'type' => MENU_CALLBACK);

    $items['centre/add'] = array('title' => t('Add Centre'),
	       'page callback' => 'dh_addedit_centre',
	       'access arguments' => array('access all centres'),
	       'type' => MENU_CALLBACK);

    $items['centre/%centre_id/edit'] = array('title' => t('Edit Centre'),
	       'page callback' => 'dh_addedit_centre',
	       'access arguments' => array('access centre settings'),
	       'type' => MENU_CALLBACK);

    $items['centre/%centre_id/acco-handler'] = array('title' => t('Accomodation'),
	       'page callback' => 'dh_acco_handler',
	       'access arguments' => array('access centre'),
	       'type' => MENU_CALLBACK);


    $items['user-mapping'] = array('title' => t('Manager User Mapping'),
	       'page callback' => 'dh_manage_usermapping',
	       'access arguments' => array('access user mapping'),
	       'type' => MENU_CALLBACK);

    $items['users'] = array('title' => t('Manage Users'),
	       'page callback' => 'dh_manage_users',
	       'access arguments' => array('access user mapping'),
	       'type' => MENU_CALLBACK);

    $items['user-mapping/handler'] = array('title' => t('Manager User Mapping'),
	       'page callback' => 'dh_manage_usermapping_handler',
	       'access arguments' => array('access user mapping'),
	       'type' => MENU_CALLBACK);


	$items['search-app'] = array( 'title' => t('Search'),
           'page arguments' => array('dh_manageapp_search_form'),
	       'page callback' => 'drupal_get_form',
	       'access arguments' => array('access all centres'),
	       'type' => MENU_LOCAL_TASK);

	$items['search-lc'] = array( 'title' => t('Search'),
	       'page callback' => 'dh_search_lc',
	       'access arguments' => array('r-at review'),
	       'type' => MENU_LOCAL_TASK);

	$items['search-lc'] = array( 'title' => t('Search'),
	       'page callback' => 'dh_search_lc',
	       'access arguments' => array('a-at review'),
	       'type' => MENU_LOCAL_TASK);

	$items['search-app/%centre_id'] = array( 'title' => t('Search'),
           'page arguments' => array('dh_manageapp_search_form'),
	       'page callback' => 'drupal_get_form',
	       'access arguments' => array('access manageapp'),
	       'type' => MENU_LOCAL_TASK);


	$items['search-course/%centre_id/%course_id'] = array( 'title' => t('Search'),
	       'page callback' => '_search_course',
	       'access arguments' => array('access manageapp'),
	       'type' => MENU_CALLBACK);

	$items['app-courses/%app_id'] = array( 'title' => t('Search'),
	       'page callback' => '_search_student',
	       'access arguments' => array('access manageapp'),
	       'type' => MENU_CALLBACK);

	$items['app-clarifications/%app_id'] = array( 'title' => t('Search'),
	       'page callback' => '_get_clarifications',
	       'access arguments' => array('access manageapp'),
	       'type' => MENU_CALLBACK);

	$items['app-activity/%app_id'] = array( 'title' => t('Search'),
	       'page callback' => '_get_activity',
	       'access arguments' => array('access manageapp'),
	       'type' => MENU_CALLBACK);

	$items['change-status/%app_id'] = array( 'title' => t('Search'),
	       'page callback' => '_change_status',
	       'access arguments' => array('change status'),
	       'type' => MENU_CALLBACK);

	$items['letters/%centre_id'] = array( 'title' => t('Manage Letters'),
	       'page callback' => 'dh_manage_letters',
	       'access arguments' => array('manage letters'),
	       'type' => MENU_CALLBACK);

	$items['letters/%centre_id/edit/%letter_id'] = array( 'title' => t('Manage Letters'),
	       'page callback' => 'dh_manage_letters',
	       'access arguments' => array('manage letters'),
	       'type' => MENU_CALLBACK);

	$items['letters/%centre_id/delete/%letter_id'] = array( 'title' => t('Manage Letters'),
	       'page callback' => 'dh_manage_letters',
	       'access arguments' => array('manage letters'),
	       'type' => MENU_CALLBACK);

	$items['letters/%centre_id/delattach/%letter_id'] = array( 'title' => t('Manage Letters'),
	       'page callback' => 'dh_manage_letters',
	       'access arguments' => array('manage letters'),
	       'type' => MENU_CALLBACK);

	$items['letter-fields/%centre_id'] = array( 'title' => t('Manage Letter Fields'),
	       'page callback' => 'dh_manage_letter_fields',
	       'access arguments' => array('manage letters'),
	       'type' => MENU_CALLBACK);

    $items['letter-fields/handler/%centre_id'] = array('title' => t('Manage Letter Fields'),
	       'page callback' => 'dh_manage_letter_fields_handler',
	       'access arguments' => array('manage letters'),
	       'type' => MENU_CALLBACK);

    $items['centre/%centre_id/sms-report'] = array('title' => t('SMS Report'),
	       'page callback' => 'dh_center_sms_report',
	       'access arguments' => array('view sms report'),
	       'type' => MENU_CALLBACK);

    $items['centre/%centre_id/bulk-mail-schedule'] = array('title' => t('Bulk Mail Schedule'),
         'page callback' => 'dh_show_bulk_mail_schedule',
         'access arguments' => array('mass mail'),
         'type' => MENU_CALLBACK);

    $items['bulk-mail/%centre_id/%bulk_mail_id/delete'] = array('title' => t('Bulk Mail Schedule'),
         'page callback' => 'dh_delete_bulk_mail_schedule',
         'access arguments' => array('mass mail'),
         'type' => MENU_CALLBACK);

    $items['bulk-mail/%centre_id/%bulk_mail_id/edit'] = array('title' => t('Bulk Mail Schedule'),
           'page callback' => 'dh_edit_bulk_mail_schedule',
         'access arguments' => array('mass mail'),
         'type' => MENU_CALLBACK);

    $items['bulk-mail/%centre_id/%bulk_mail_id/mute'] = array('title' => t('Bulk Mail Schedule'),
         'page callback' => 'dh_mute_bulk_mail_schedule',
         'access arguments' => array('mass mail'),
         'type' => MENU_CALLBACK);

    $items['bulk-mail/%centre_id/%bulk_mail_id/unmute'] = array('title' => t('Bulk Mail Schedule'),
         'page callback' => 'dh_unmute_bulk_mail_schedule',
         'access arguments' => array('mass mail'),
         'type' => MENU_CALLBACK);

	$items['sms-count/%course_id'] = array( 'title' => 'SMS Report',
	       'page callback' => '_get_sms_count',
	       'access arguments' => array('view sms report'),
	       'type' => MENU_CALLBACK);

    $items['centre/%centre_id/course-report'] = array('title' => t('Course Report'),
    		'page arguments' => array('dh_center_course_report_form'),
	       'page callback' => 'drupal_get_form',
	       'access arguments' => array('view course report'),
	       'type' => MENU_CALLBACK);

	$items['zero-day'] = array( 'title' => t('Day Zero'),
	       'page callback' => 'dh_manage_day_zero',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);

	$items['zero-day/%centre_id'] = array( 'title' => t('Day Zero'),
	       'page callback' => 'dh_manage_day_zero',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);

	$items['zero-day/%centre_id/%course_id'] = array( 'title' => t('Day Zero'),
	       'page callback' => 'dh_manage_day_zero',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);


	$items['app/%app_id/edit'] = array( 'title' => t('Day Zero'),
	       'page callback' => 'dh_manage_day_zero',
	       'access arguments' => array('edit application'),
	       'type' => MENU_CALLBACK);

	$items['app/%app_id/edit/%ctools_js'] = array( 'title' => t('Day Zero'),
	       'page callback' => 'dh_manage_day_zero',
	       'access arguments' => array('edit application'),
	       'type' => MENU_CALLBACK);

	$items['app/%app_id/delete'] = array( 'title' => t('Day Zero'),
	       'page callback' => '_delete_app',
	       'access arguments' => array('delete application'),
	       'type' => MENU_CALLBACK);


	$items['app/add/%centre_id/%course_id'] = array( 'title' => t('Day Zero'),
	       'page callback' => 'dh_manage_day_zero',
	       'access arguments' => array('add application'),
	       'type' => MENU_CALLBACK);

	$items['app/add/%centre_id/%course_id/%ctools_js'] = array( 'title' => t('Day Zero'),
	       'page callback' => 'dh_manage_day_zero',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);

	$items['app-update-attended/%app_id'] = array( 'title' => t('Day Zero'),
	       'page callback' => 'dh_app_update_attended',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);

	$items['move-to-course/%app_id/%course_id/%centre_id'] = array( 'title' => t('Move To Course'),
	       'page callback' => '_move_to_centre_course',
	       'access arguments' => array('access course'),
	       'type' => MENU_CALLBACK);

	$items['teacher-list/%centre_id/%course_id'] = array( 'title' => t('Teacher List'),
	       'page callback' => 'dh_manage_day_zero',
	       'access arguments' => array('view teachers list'),
	       'type' => MENU_CALLBACK);

	$items['manager-list/%centre_id/%course_id'] = array( 'title' => t('Teacher List'),
	       'page callback' => 'dh_manage_day_zero',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);

	$items['cell-list/%centre_id/%course_id'] = array( 'title' => t('Cell List'),
	       'page callback' => 'dh_manage_day_zero',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);

	$items['laundry-list/%centre_id/%course_id'] = array( 'title' => t('Laundry List'),
	       'page callback' => 'dh_manage_day_zero',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);

	$items['valuable-list/%centre_id/%course_id'] = array( 'title' => t('Valuable List'),
	       'page callback' => 'dh_manage_day_zero',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);

	$items['course-pdf-m/%centre_id/%course_id'] = array( 'title' => t('Male PDF'),
	       'page callback' => 'course_pdf',
	       'access arguments' => array('access male'),
	       'type' => MENU_CALLBACK);

	$items['course-pdf-f/%centre_id/%course_id'] = array( 'title' => t('Female PDF'),
	       'page callback' => 'course_pdf',
	       'access arguments' => array('access female'),
	       'type' => MENU_CALLBACK);

	$items['seating/%centre_id/%course_id'] = array( 'title' => t('Teacher List'),
	       'page callback' => 'dh_manage_day_zero',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);

  $items['seating-update/%centre_id/%course_id'] = array( 'title' => t('Update Seating Plan'),
       'page callback' => 'dh_manage_day_zero',
       'access arguments' => array('access zero day'),
       'type' => MENU_CALLBACK);

	$items['seating2/%centre_id/%course_id'] = array( 'title' => t('Seating Plan'),
	       'page callback' => 'dh_manage_day_zero',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);

	$items['day0-list/%centre_id/%course_id'] = array( 'title' => t('Day Zero List'),
	       'page callback' => 'dh_manage_day_zero',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);

	$items['student-chit/%centre_id/%course_id'] = array( 'title' => t('Student Chit'),
	       'page callback' => 'dh_manage_day_zero',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);

  $items['checking-slip/%centre_id/%course_id'] = array( 'title' => t('Student Chit'),
         'page callback' => 'dh_manage_day_zero',
         'access arguments' => array('access zero day'),
         'type' => MENU_CALLBACK);

	$items['report-day11/%centre_id/%course_id'] = array( 'title' => t('Day 11 Report'),
	       'page callback' => 'course_day11_report',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);

    $items['at-schedule/%centre_id'] = array('title' => t('AT Scheduling'),
	       'page callback' => 'dh_manage_at_schedule',
	       'access arguments' => array('at scheduling'),
	       'type' => MENU_CALLBACK);

    $items['assign-teacher/%centre_id/%course_id'] = array( 'title' => t('Assign Teachers'),
	       'page callback' => 'dh_assign_teacher',
	       'access arguments' => array('at scheduling'),
	       'type' => MENU_CALLBACK);

    $items['at-schedule/change-status/%atappid'] = array( 'title' => t('AT Scheduling'),
	       'page callback' => 'at_app_change',
	       'access arguments' => array('at scheduling'),
	       'type' => MENU_CALLBACK);

    $items['at-schedule/change-type/%atappid'] = array( 'title' => t('AT Scheduling'),
	       'page callback' => 'at_app_change',
	       'access arguments' => array('at scheduling'),
	       'type' => MENU_CALLBACK);

    $items['at-schedule/change-group/%atappid'] = array( 'title' => t('AT Scheduling'),
	       'page callback' => 'at_app_change',
	       'access arguments' => array('at scheduling'),
	       'type' => MENU_CALLBACK);

    $items['at-schedule/del-trainee-teacher/%centre_id/%course_id/%atappid'] = array( 'title' => t('AT Scheduling'),
	       'page callback' => 'del_trainee_teacher',
	       'access arguments' => array('at scheduling'),
	       'type' => MENU_CALLBACK);

    $items['at-schedule/get-at-info/%'] = array( 'title' => t('AT Scheduling'),
	       'page callback' => 'get_at_info',
	       'access arguments' => array('at scheduling'),
	       'type' => MENU_CALLBACK);

    $items['at-app-activity/%atappid'] = array( 'title' => t('AT Scheduling'),
	       'page callback' => '_get_at_app_activity',
	       'access arguments' => array('at scheduling'),
	       'type' => MENU_CALLBACK);

    $items['autocomplete/get-trainee-teacher'] = array( 'title' => t('Trainee Teacher'),
	       'page callback' => '_get_trainee_teacher',
	       'access arguments' => array('at scheduling'),
	       'type' => MENU_CALLBACK);

    $items['referral/%centre_id/add'] = array('title' => t('Referral List'),
	       'page callback' => 'dh_addedit_referral',
	       'access arguments' => array('manage referral list'),
	       'type' => MENU_CALLBACK);

    $items['referral/%centre_id/edit/%ref_id'] = array('title' => t('Referral List'),
	       'page callback' => 'dh_addedit_referral',
	       'access arguments' => array('manage referral list'),
	       'type' => MENU_CALLBACK);

    $items['referral/%centre_id'] = array('title' => t('Referral List'),
	       'page callback' => 'dh_referral_results',
	       'access arguments' => array('view referral list'),
	       'type' => MENU_CALLBACK);

    $items['referral/%centre_id/%ref_id/delete'] = array('title' => t('Referral List'),
	       'page callback' => 'referral_delete',
	       'page arguments' => array(2),
	       'access arguments' => array('delete referral list'),
	       'type' => MENU_CALLBACK);

    $items['referral/read-only/%ref_id'] = array('title' => t('Referral Readonly'),
         'page callback' => 'referral_readonly',
         'page arguments' => array(2),
         'access arguments' => array('delete referral list'),
         'type' => MENU_CALLBACK);

    $items['referral'] = array('title' => t('Referral List'),
	       'page callback' => 'dh_referral_results',
	       'access arguments' => array('view referral list'),
	       'type' => MENU_CALLBACK);

    $items['at-portal/referral/add'] = array('title' => t('Referral List'),
         'page callback' => 'dh_addedit_referral',
         'access arguments' => array('add referral list'),
         'type' => MENU_CALLBACK);

    $items['referral/get-activity/%'] = array( 'title' => t('Get Referral Activity'),
         'page callback' => 'get_referral_activity',
         'page arguments' => array(2),
         'access arguments' => array('view referral list'),
         'type' => MENU_CALLBACK);

    $items['center-referral/%centre_id'] = array('title' => t('Center Referral List'),
	       'page callback' => 'dh_referral_results',
	       'access arguments' => array('view center referral list'),
	       'type' => MENU_CALLBACK);

    $items['center-referral/%centre_id/add'] = array('title' => t('Center Referral List'),
	       'page callback' => 'dh_addedit_referral',
	       'access arguments' => array('manage center referral list'),
	       'type' => MENU_CALLBACK);

    $items['center-referral/%centre_id/edit/%ref_id'] = array('title' => t('Center Referral List'),
	       'page callback' => 'dh_addedit_referral',
	       'access arguments' => array('manage center referral list'),
	       'type' => MENU_CALLBACK);

    $items['center-referral/%centre_id/%ref_id/delete'] = array('title' => t('Center Referral List'),
	       'page callback' => 'referral_delete',
	       'page arguments' => array(2),
	       'access arguments' => array('delete center referral list'),
	       'type' => MENU_CALLBACK);

    $items['daily-activity/%centre_id'] = array('title' => t('Daily Activity'),
           'page arguments' => array('dh_daily_activity_form'),
           'page callback' => 'drupal_get_form',
	       'access arguments' => array('access daily activity'),
	       'type' => MENU_CALLBACK);

	$items['get-courses/%'] = array( 'title' => t('Get Courses'),
	       'page callback' => '_get_courses',
	       'access arguments' => array('transfer course'),
	       'type' => MENU_CALLBACK);


	$items['autocomplete/get-country'] = array( 'title' => t('Country'),
	       'page callback' => '_get_country',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);

	$items['autocomplete/get-state'] = array( 'title' => t('State'),
	       'page callback' => '_get_state',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);

	$items['autocomplete/get-city'] = array( 'title' => t('City'),
	       'page callback' => '_get_city',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);

	$items['get-location-from-pincode'] = array( 'title' => t('Pincode'),
	       'page callback' => '_get_location_from_pincode',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);

	$items['autocomplete/get-teacher'] = array( 'title' => t('Teacher'),
	       'page callback' => '_get_teacher',
	       'access arguments' => array('access zero day'),
	       'type' => MENU_CALLBACK);

	$items['webhook/mailgun'] = array( 'title' => t('Mailgun'),
	       'page callback' => 'mailgun_webhook',
	       'access arguments' => array('access webhook'),
	       'type' => MENU_CALLBACK);

	$items['webhook3/mailgun'] = array( 'title' => t('Mailgun'),
	       'page callback' => 'mailgun_webhook3',
	       'access arguments' => array('access webhook'),
	       'type' => MENU_CALLBACK);

	$items['center-dashboard'] = array(
        'title' => t('Center Dashboard'),
        'page callback' => 'get_teahcer_dashboard',
        'access arguments' => array('access center dashboard'),
        'type' => MENU_CALLBACK,);
    $items['center-dashboard-page'] = array(
        'title' => t('Center Dashboard'),
        'page callback' => 'center_dashboard_page',
        'access arguments' => array('access center dashboard'),
        'type' => MENU_CALLBACK,);

    $items['vri-management'] = array(
        'title' => t('VRI Management'),
        'page callback' => 'vri_management',
        'access arguments' => array('access all center dashboard'),
        'type' => MENU_CALLBACK,);

    $items['user-logout'] = array(
        'title' => t('Logout'),
        'page callback' => 'get_user_logout',
        'access callback' => true,
        'type' => MENU_CALLBACK,);

    $items['app-student-count-finalize/%course_id'] = array(
        'title' => t('Search'),
        'page callback' => '_get_student_finalize',
        'access arguments' => array('access manageapp'),
        'type' => MENU_CALLBACK,);



    $items['app-student-count-cancel/%course_arr'] = array(
        'title' => t('Search'),
        'page callback' => '_get_student_cancel_count',
        'access arguments' => array('access manageapp'),
        'type' => MENU_CALLBACK,);

    // $items['app-student-count-cancel/%course_arr'] = array(
    //     'title' => t('Search'),
    //     'page callback' => '_get_student_cancel_count',
    //     'access arguments' => array('access manageapp'),
    //     'type' => MENU_CALLBACK,);


	$items['show-application/%app_id'] = array( 'title' => t('Application PDF'),
	       'page callback' => 'show_application_pdf',
	       'page arguments' => array(1),
	       'access arguments' => array('access application pdf'),
	       'type' => MENU_CALLBACK);

	$items['show-photo/%app_id'] = array( 'title' => t('Applicant Photo'),
	       'page callback' => 'show_application_photo',
	       'page arguments' => array(1),
	       'access arguments' => array('access manageapp'),
	       'type' => MENU_CALLBACK);


	$items['show-clarification/%app_id/%clarification_id'] = array( 'title' => t('Applicant Clarification Data'),
	       'page callback' => 'show_clarification',
	       'page arguments' => array(1,2),
	       'access arguments' => array('access manageapp'),
	       'type' => MENU_CALLBACK);

	$items['wa-hook'] = array( 'title' => t('Whatsapp Hook'),
	       'page callback' => 'whatsapp_hook',
	       'access arguments' => array('access webhook'),
	       'type' => MENU_CALLBACK);

  $items['finalize-not-marked-attended'] = array('title' => t('Finalize not Marked Attended Report'),
         'page callback' => 'finalize_csv',
         'access arguments' => array('view finalize report'),
         'type' => MENU_CALLBACK);

  $items['finalize-marked-attended'] = array('title' => t('Finalize Marked Attended Report'),
         'page callback' => 'finalize_csv',
         'access arguments' => array('view finalize report'),
         'type' => MENU_CALLBACK);


	$items['wa-hook-bulk'] = array( 'title' => t('Whatsapp Bulk Hook'),
	       'page callback' => 'whatsapp_hook_bulk',
	       'access arguments' => array('access webhook'),
	       'type' => MENU_CALLBACK);

	return $items;
}

function dh_manageapp_theme()
{
    $themes = array();
    $themes['center_dashboard_page'] = array(
        'template' => 'center-dashboard-page',
        'path' => drupal_get_path('module', 'dh_manageapp') . '/tpl/',
    );

    $themes['vri_management'] = array(
        'template' => 'vri-management-page',
        'path' => drupal_get_path('module', 'dh_manageapp') . '/tpl/',
    );
    return $themes;
}


function dh_manageapp_form_user_admin_account_alter(&$form, &$form_state, $form_id) 
{
	global $user;
	if (!user_access('administer users')) 
	{
		$res = db_query("select uc_center from dh_user_center where uc_user='".$user->uid."'");
		$center_access = array();
		while($r = $res->fetchAssoc())
			$center_access[] = $r['uc_center'];
		foreach ($form['accounts']['#options'] as $uid => $fields) 
		{
			$account = user_load($uid);
		  	if (!_manageapp_check_access($account, $center_access)) 
		  	{
		   		unset($form['accounts']['#options'][$uid]);
		  	}
		}
	}
}


function _manageapp_check_access($account, $center_access)
{
	$q = "select count(uc_id) from dh_user_center where uc_user='".$account->uid."' and uc_center in (".implode(",", $center_access).") and uc_deleted=0";
	$c = db_query($q)->fetchField();
	return $c;
}

function center_dashboard_page()
{
    print theme('center_dashboard_page');
    module_invoke_all('exit');
    exit();
}

function vri_management()
{
    print theme('vri_management');
    module_invoke_all('exit');
    exit();
}

function dh_manageapp_file_download($uri) 
{
	// Get the file record based on the URI. If not in the database just return.
	//drupal_set_message($uri);
	$file = drupal_realpath($uri);
 	if ( !file_exists($file) )
 	{
 		watchdog('File', 'File not Found - '.$uri);
 		return;
 	}
 	$ext = strtolower(pathinfo($file, PATHINFO_EXTENSION));
 	
	global $user;

	if ( $ext == 'pdf' )
	{
		if (user_access('access application pdf'))
		{
			$name = basename($file);
			$header = array('Content-Type' => 'application/pdf', 'Content-Length' => filesize($file), 'Content-disposition' => 'inline; filename="'.$name.'"',
				'Cache-Control' => 'private');
			return $header;
		}		
	}
	elseif ( in_array($ext, array('jpg', 'jpeg', 'png' ))  )
	{
		if ( user_access('access application photos') )
		{
			if ( $ext == 'jpg' ) $ext = 'jpeg';
			$name = basename($file);
			$header = array('Content-Type' => 'image/'.$ext, 'Content-Length' => filesize($file) );
			return $header;

		}
	}
	elseif ( in_array($ext, array('doc', 'docx' ))  )
	{
		if (user_access('access application pdf'))
		{
			$name = basename($file);
			$header = array('Content-Type' => 'application/octet-stream', 'Content-Length' => filesize($file), 
				'Content-disposition' => 'attachment; filename="'.$name.'"',
				'Cache-Control' => 'private');
			return $header;
		}		
	}
}

function clarification_id_load( $id )
{
	if (!is_numeric($id))
		return false;

	return $id;
}

function bulk_mail_id_load( $id )
{
  if (!is_numeric($id))
    return false;

  $inactive = db_query("select bm_id from dh_bulk_mail where bm_id=$id and (bm_processed in (1, 2) or bm_deleted=1)")->fetchField();

  if($inactive)
    return false;

  return $id;
}


function centre_id_load( $id )
{
	global $user;
	if (!is_numeric($id))
		return false;
	$temp = db_query("select c_id from dh_center where c_id='$id'")->fetchField();
	if ($temp <> $id)
		return false;

	if (user_access("access all centres") || (user_access("access other center courses") && (arg(0)=="move-to-course")))
		return $id;

	$temp = db_query("select count(uc_id) from dh_user_center where uc_user='".$user->uid."' and uc_center='$id' and uc_deleted=0")->fetchField();
	//watchdog('TEMP', "select count(uc_id) from dh_user_center where uc_user='".$user->uid."' and uc_center='$id'");
	if ($temp > 0 )
		return $id;

	return false;
}

function course_id_load( $id )
{
	global $user;
	if (!is_numeric($id))
		return false;
	$temp = db_query("select c_id from dh_course where c_id='$id'")->fetchField();
	if ($temp <> $id)
		return false;

	if (user_access("access all centres") || (user_access("access other center courses") && (arg(0)=="move-to-course")))
		return $id;

	$centre = db_query("select c_center from dh_course where c_id=$id")->fetchField();
	$temp = db_query("select count(uc_id) from dh_user_center where uc_user='".$user->uid."' and uc_center='$centre' and uc_deleted=0")->fetchField();
	//watchdog('TEMP', "select count(uc_id) from dh_user_center where uc_user='".$user->uid."' and uc_center='$id'");
	if ($temp > 0 )
		return $id;

	return false; 
}

function app_id_load( $id )
{
	global $user;
	if ( ! is_numeric($id) )
		return false;

	$centre_id = db_query("select a_center from dh_applicant where a_id='$id'")->fetchField();
	if ($centre_id == '')
		return false;
	if (user_access("access all centres"))
		return $id;
	$count = db_query("select count(uc_id) from dh_user_center where uc_center='$centre_id' and uc_user='".$user->uid."'  and uc_deleted=0")->fetchField();
	if ( $count <= 0  )
		return false;

	$gender = db_query("select a_gender from dh_applicant where a_id=$id")->fetchField();
	$gender = strtoupper($gender);
	if (($gender == 'M') && (! user_access('access male')))
		return false;		

	if (($gender == 'F') && (! user_access('access female')))
		return false;

	return $id;
}

function ref_id_load( $id )
{
	global $user;

	if (!is_numeric($id))
		return false;

	$ref_id = db_query("select r_id from dh_referral where r_id=$id and r_deleted = 0")->fetchField();

	if (!$ref_id)
		return false;

	if (user_access("access all centres"))
		return $id;
	
	if (user_access("manage referral list"))
	{
		$temp = db_query("select r_id from dh_referral where r_id=$id and r_center=0")->fetchField();

		if ( $temp == $id )
			return $id;
	}

	if (user_access("manage center referral list"))
	{
		$temp = db_query("select r_id, r_center from dh_referral where r_id=$id")->fetchAssoc();
		if ($temp['r_id'] == $id)
		{
			$count = db_query("select count(uc_id) from dh_user_center where uc_center='{$temp['r_center']}' and uc_user='".$user->uid."' and uc_deleted=0")->fetchField();

			if ( $count > 0 )
				return $id;
		}
	}

	return false;
}


function course_teacher_id_load( $id )
{
	if (!is_numeric($id))
		return false;
	$temp = db_query("select ct_id from dh_course_teacher where ct_id=$id")->fetchField();
	if ( $temp <> $id )
		return false;
	return $id;
}


function letter_id_load( $id )
{
	if (!is_numeric($id))
		return false;
	$temp = db_query("select l_id from dh_letter where l_id=$id")->fetchField();
	if ( $temp <> $id )
		return false;
	return $id;	
}

function course_arr_load( $crs_arr )
{
	return $crs_arr;	
}

function dh_manageapp_admin_form($form, &$form_state)
{
	$options = array("3 month" => '3 Months Old', '6 month' => '6 Months Old', '9 month' => '9 Months Old', '12 month' => '1 Year old' );
 	$form['max_old_courses'] = array('#type' => 'select', '#options' => $options , '#title' => 'Maximum Old Courses to show?', 
 		'#default_value' => variable_get('max_old_courses', '6 month') );

 	$form['cell_list_rows_per_page'] = array('#type' => 'textfield', '#size' => '5' , '#title' => 'Rows per page in Cell List For Print?', 
 		'#default_value' => variable_get('cell_list_rows_per_page', '5') );

 	$form['student_chit_rows_per_page'] = array('#type' => 'textfield', '#size' => '5' , '#title' => 'Blocks per page in Student Chit For Print?', 
 		'#default_value' => variable_get('student_chit_rows_per_page', '18') );

 	$form['important_notice'] = array('#type' => 'textarea', '#rows' => 3, '#title' => 'Urgent Important Notice', 
 		'#default_value' => variable_get('important_notice', ''));

 	$form['s3_bucket_name'] = array('#type' => 'textfield',  '#title' => 'S3 Bucket Name', 
 		'#default_value' => variable_get('s3_bucket_name', variable_get('s3_bucket_name', '')));

 	$group = 'Test Mode Settings';
 	$form[$group] = array('#type' => 'fieldset','#title' => $group , '#collapsible' => true, '#collapsed' => false);
 	$form[$group]['mode_test'] = array('#type' => 'radios', '#options' => array('0' => 'No', '1' => 'Yes' ) , '#title' => 'Test mode on?', 
 		'#default_value' => variable_get('mode_test', '0') );
 	$form[$group]['mode_test_emails'] = array('#type' => 'textfield', '#size' => 120 , '#title' => 'Test mode Emails to send letters?', 
 		'#default_value' => variable_get('mode_test_emails', '') );


 	$group = 'Mail Settings';
 	$form[$group] = array('#type' => 'fieldset','#title' => 'Mail Settings' , '#collapsible' => true, '#collapsed' => false);
 	$form[$group]['mailgun_primary_domain'] = array('#title' => 'Mailgun Primary Domain', '#type' => 'textfield', '#size' => 40, '#default_value' => variable_get('mailgun_primary_domain', ''));
 	$form[$group]['mailgun_key'] = array('#title' => 'Mailgun Key', '#type' => 'textfield', '#size' => 40, '#default_value' => variable_get('mailgun_key', ''));

 	$group = 'SMS Settings';
 	$form[$group] = array('#type' => 'fieldset','#title' => 'SMS Settings' , '#collapsible' => true, '#collapsed' => false);
 	$form[$group]['sms_url'] = array('#title' => 'SMS URL', '#type' => 'textfield', '#size' => 170, '#maxlength' => 250, '#default_value' => variable_get('sms_url', ''));

 	$form[$group]['sms_api_url'] = array('#title' => 'SMS API URL', '#type' => 'textfield', '#size' => 170, '#maxlength' => 250, '#default_value' => variable_get('sms_api_url', ''));


 	$group = 'South Africa SMS Settings';
 	$form[$group] = array('#type' => 'fieldset','#title' => 'South Africa SMS Settings' , '#collapsible' => true, '#collapsed' => false);
 	$form[$group]['sms_sa_url'] = array('#title' => 'SA API URL', '#type' => 'textfield', '#size' => 170, '#maxlength' => 250, '#default_value' => variable_get('sms_sa_url', ''));
 	$form[$group]['sms_sa_client_id'] = array('#title' => 'Client ID', '#type' => 'textfield', '#size' => 170, '#maxlength' => 250, '#default_value' => variable_get('sms_sa_client_id', ''));
 	$form[$group]['sms_sa_secret'] = array('#title' => 'Client Secret', '#type' => 'textfield', '#size' => 170, '#maxlength' => 250, '#default_value' => variable_get('sms_sa_secret', ''));


 	$group = 'Applicant Settings';
 	$form[$group] = array('#type' => 'fieldset','#title' => 'Applicant Settings' , '#collapsible' => true, '#collapsed' => false);
 	$form[$group]['applicant_url'] = array('#title' => 'Applicant URL', '#type' => 'textfield', '#size' => 170, '#maxlength' => 250, '#default_value' => variable_get('applicant_url', ''));


 	$group = 'Whatsapp Settings';
 	$form[$group] = array('#type' => 'fieldset','#title' => 'Whatsapp Settings' , '#collapsible' => true, '#collapsed' => false);
 	$form[$group]['wa360_url'] = array('#title' => 'URL', '#type' => 'textfield', '#size' => 200, '#maxlength' => 250, '#default_value' => variable_get('wa360_url', ''));
 	$form[$group]['wa360_api_key'] = array('#title' => 'API Key', '#type' => 'textfield', '#size' => 200, '#maxlength' => 250, '#default_value' => variable_get('wa360_api_key', ''));
 	$form[$group]['wa360_namespace'] = array('#title' => 'Namespace', '#type' => 'textfield', '#size' => 200, '#maxlength' => 250, '#default_value' => variable_get('wa360_namespace', ''));


 	$group = 'DIPI Statistics Settings';
 	$form[$group] = array('#type' => 'fieldset','#title' => 'Statistics Settings' , '#collapsible' => true, '#collapsed' => false);
 	$form[$group]['stats_url'] = array('#title' => 'Stats URL', '#type' => 'textfield', '#size' => 170, '#maxlength' => 250, '#default_value' => variable_get('stats_url', ''));

 	$group = 'DIPI RabbitMQ Settings';
 	$form[$group] = array('#type' => 'fieldset','#title' => 'RabbitMQ Settings' , '#collapsible' => true, '#collapsed' => true);
 	$form[$group]['mq_host'] = array('#title' => 'MQ Host', '#type' => 'textfield', '#size' => 50, '#maxlength' => 50, '#default_value' => variable_get('mq_host', ''));
 	$form[$group]['mq_port'] = array('#title' => 'MQ Port', '#type' => 'textfield', '#size' => 20, '#maxlength' => 5, '#default_value' => variable_get('mq_port', ''));
 	$form[$group]['mq_user'] = array('#title' => 'MQ User', '#type' => 'textfield', '#size' => 30, '#maxlength' => 30, '#default_value' => variable_get('mq_user', ''));
 	$form[$group]['mq_passwd'] = array('#title' => 'MQ Password', '#type' => 'textfield', '#size' => 30, '#maxlength' => 60, '#default_value' => variable_get('mq_passwd', ''));


  $group = 'Referral Cron Settings';
  $form[$group] = array('#type' => 'fieldset','#title' => 'Referral Cron Settings' , '#collapsible' => true, '#collapsed' => true);
  $form[$group]['referral_from_email'] = array('#title' => 'From Email', '#type' => 'textfield', '#size' => 50, '#maxlength' => 50, '#default_value' => variable_get('referral_from_email', ''));
  $form[$group]['referral_cc_email'] = array('#title' => 'CC Email', '#type' => 'textfield', '#size' => 50, '#maxlength' => 50, '#default_value' => variable_get('referral_cc_email', ''));

   return system_settings_form($form);
}



function dh_manage_usermapping_handler()
{
	global $user;
	include_once "sites/all/libraries/editor/php/DataTables.php";
    $centers_allowed = array();
    $users_allowed = array();
    if ( ! user_access('administer manageapp') )
    {
	    $res = db_query("select uc_center from dh_user_center where uc_user='".$user->uid."' and uc_deleted=0");
    	while( $r = $res->fetchAssoc())
        	$centers_allowed[] = $r['uc_center'];

       	$res = db_query("select uc_user from dh_user_center where uc_center in (".implode(",", $centers_allowed).") and uc_deleted=0");
       	while( $r = $res->fetchAssoc())
        	$users_allowed[] = $r['uc_user'];

       	$res = db_query("select u.uid from users u left join user_created_by_data uc on (u.uid=uc.uid) where uc.creator_uid='".$user->uid."'");
       	while( $r = $res->fetchAssoc())
        	if (!in_array($r['uid'], $users_allowed))
            	$users_allowed[] = $r['uid'];
    }

	$editor = \DataTables\Editor::inst( $db, 'dh_user_center', 'uc_id' ); 
    $editor->fields(\DataTables\Editor\Field::inst( 'dh_user_center.uc_user' )
   	            ->options( \DataTables\Editor\Options::inst()
                ->table( 'users' )
                ->value( 'uid' )
                ->label( 'name' )
                ->where( function ($q) {
		            $q->where( 'name', 'Applicant', '!=' );
		            $q->where( 'name', '', '!=' );
        		})
               ->where( function ($q) use ($users_allowed) {
                   	foreach($users_allowed as $k => $c)
                   		if ($k == 0 )
                        	$q->where('uid', $c);
                        else
                        	$q->or_where('uid', $c);
                })                        
            )
   	        ->validator( \DataTables\Editor\Validate::notEmpty( \DataTables\Editor\ValidateOptions::inst()
                ->message( 'Please Select a User' )
            ) ),
	        \DataTables\Editor\Field::inst( 'uc.name' ),
			\DataTables\Editor\Field::inst( 'dh_user_center.uc_center' )
   	            ->options( \DataTables\Editor\Options::inst()
                ->table( 'dh_center' )
                ->value( 'c_id' )
                ->label( 'c_name' )
                ->where( function ($q) use ($centers_allowed) {
                   	foreach($centers_allowed as $k => $c)
                    	if ($k == 0 )
                        	$q->where('c_id', $c);
                        else
                        	$q->or_where('c_id', $c);
                })      
            )
   	        ->validator( \DataTables\Editor\Validate::notEmpty( \DataTables\Editor\ValidateOptions::inst()
                ->message( 'Please Select a Center' )
            ) ),            
        \DataTables\Editor\Field::inst( 'dh_center.c_name' ),
        \DataTables\Editor\Field::inst( 'dh_user_center.uc_deleted' ),
        \DataTables\Editor\Field::inst( 'dh_user_center.uc_id' ),
	    \DataTables\Editor\Field::inst( 'dh_user_center.uc_updated_by' )
	    ->setValue( $user->uid ),
        \DataTables\Editor\Field::inst( 'up.name' ),
	    \DataTables\Editor\Field::inst( 'dh_user_center.uc_updated' )
	    ->setValue( date('Y-m-d H:i:s') ),
	    \DataTables\Editor\Field::inst( 'dh_user_center.uc_created_by' )
	    ->set( \DataTables\Editor\Field::SET_CREATE )
	    ->setValue( $user->uid )	   
	  )
    ->leftJoin('users as uc', 'uc.uid', '=', 'dh_user_center.uc_user' ) 
    ->leftJoin('dh_center', 'dh_center.c_id', '=', 'dh_user_center.uc_center' ) 
    ->leftJoin('users as up', 'up.uid', '=', 'dh_user_center.uc_updated_by' ) 
    ->pkey('uc_id')
//    ->on( 'preCreate', function ( $editor, $values ) { _course_set_default( $editor, 0, $values); } )
//   ->on( 'preEdit', function ( $editor, $id, $values ) { _course_set_default( $editor, $id, $values); } )
    ->on( 'preRemove', function() { return false; })
    ->where( 'uc_deleted', 0);

   	if(! user_access("administer manageapp") )
   	{
    	$editor->where( function ( $q ) use ($centers_allowed) 
    	{
        	foreach($centers_allowed as $k => $c)
            	if ( $k == 0)
                	$q->where( 'uc_center', $c );
                else
                	$q->or_where( 'uc_center',  $c);
        } );
   	}

    $editor->process( $_POST )
    ->json();
    exit;
}

function dh_manage_users()
{
	global $user;
	drupal_add_css(drupal_get_path( 'module', 'dh_manageapp').'/css/manageapp.css');

	$temp = db_query("select uc_center from dh_user_center where uc_deleted=0 and uc_user = '".$user->uid."'")->fetchAllKeyed(0,0);
	$centres = implode(",", array_values($temp));
	$q = "select u.uid as id, uc.uc_user, u.name as username, u.status as status, FROM_UNIXTIME(u.created) as created, FROM_UNIXTIME(u.access) as access, GROUP_CONCAT(r.name order by r.name SEPARATOR'\r\n') as roles from users u left join users_roles ur on u.uid = ur.uid left join role r on ur.rid = r.rid left join dh_user_center uc on u.uid = uc.uc_user where uc_deleted=0 and uc.uc_center IN ($centres) and r.rid > 3 group by u.uid order by status desc, username, created";
	$result = db_query($q);
	$rows = array();
	while ($r = $result->fetchAssoc()) 
	{	
		unset($rs);
		$rs[] = $r['id'];
		$rs[] = $r['username'];
		$rs[] = $r['status']?'Active':'Inactive';
		$rs[] = nl2br($r['roles']);
		$rs[] = $r['created'];
		$rs[] = $r['access'];		
		$rs[] = l("Edit", "user/".$r['id']."/edit");
		$rows[] = array_values($rs);
	}
	$out = '<h3>'.l("Back to Dashboard", "centre/".arg(1))." | ".l("Create User", "admin/people/create")." | ".l("User Mapping", "user-mapping").'</h3>';
	$header = array('ID', 'Name', 'Status', 'Roles','Member since','Last access', 'Action');	
	$out .= theme("table", array('header' => $header, 'rows' => $rows ));

	return $out;
}

function dh_manage_usermapping()
{
	drupal_add_library('system', 'ui.core');
	drupal_add_library('system', 'ui.dialog');
	drupal_add_library('system', 'ui.datepicker');
	drupal_add_css( libraries_get_path("editor"). "/DataTables/datatables.min.css");
	drupal_add_js( libraries_get_path("editor").  "/DataTables/datatables.min.js");
	drupal_add_css(drupal_get_path('module', 'dh_manageapp').'/css/select2.min.css');
	drupal_add_js(drupal_get_path('module', 'dh_manageapp').'/js/select2.min.js');
	drupal_add_js(drupal_get_path('module', 'dh_manageapp').'/js/editor.select2.js');

	$js = '
		var editor;
		(function ($) {
			function load_editor()
			{
				editor = new $.fn.dataTable.Editor({ 
				    ajax: {url: "/user-mapping/handler/'.arg(1).'", type: "POST"},
					table: "#user-mapping-table",
				    fields: [
				        { name: "dh_user_center.uc_center", label: "Centre Name", type: "select2" },
				        { name: "dh_user_center.uc_user", label:  "User", type: "select2" }, 
				        { name: "dh_user_center.uc_deleted", type: "hidden",default: "0" },

				    ]
				});


				var table = $("#user-mapping-table").DataTable( {
				    ajax: "/user-mapping/handler/'.arg(1).'",
				    dom: "Bfrtip",
					columns: [
						{ data: "dh_user_center.uc_id"  },
						{ data: "dh_center.c_name"  },
						{ data: "uc.name" },
						{ data: "dh_user_center.uc_updated"  },
						{ data: "up.name"  },
					],
				    select: true,
				    buttons: [
				        { extend: "create", editor: editor },
				        { extend: "edit",   editor: editor },
			            {
			                extend: "selected",
			                text: "Delete",
			                action: function ( e, dt, node, config ) {
			                    var rows = table.rows( {selected: true} ).indexes();
			 
			                    editor
			                        .hide( editor.fields() )
			                        .one( "close", function () {
			                            setTimeout( function () { // Wait for animation
			                                editor.show( editor.fields() );
			                            }, 500 );
			                        } )
			                        .edit( rows, {
			                            title: "Delete",
			                            message: rows.length === 1 ?
			                                "Are you sure you wish to delete this row?" :
			                                "Are you sure you wish to delete these "+rows.length+" rows",
			                            buttons: "Delete"
			                        } )
			                        .val( "dh_user_center.uc_deleted", 1 );
			                }
			            }
				    ]
				});

			}



			$(document).ready(function(){
				load_editor();
			});
		})(jQuery);
	';
	drupal_add_js($js, 'inline');

	//$out = '<h2>'.l("Back to Manage Letters", "letters/".arg(1)).'</h2>';
	$out = '<table id="user-mapping-table">
				<thead>
					<tr>
						<th>Id</th>
						<th>Centre Name</th>
						<th>User</th>
						<th>Last Updated On</th>
						<th>Last Updated by</th>
					</tr>
				</thead>

	</table>';
	return $out;

}

function dh_get_course_types()
{
	$q = "select td_id as 'id', td_val1 as 'Course', td_val2 as 'Duration' from dh_type_detail where td_type='COURSE-TYPE'";
	$hand = db_query($q);
	$out = array();
	while($row = $hand->fetchAssoc())
	{
		$out[] = $row;
	}
	drupal_json_output($out);
	exit;
}


function _get_courses()
{
	$centre = arg(1);
	$q = "select c_name as 'name', c_id as 'id' from dh_course where c_center=$centre and c_deleted = 0 and c_start >= curdate() order by c_start";
	$hand = db_query($q);
	$out = array();
	while($row = $hand->fetchAssoc())
	{
		$out[] = $row;
	}
	drupal_json_output($out);
	exit;
}



function _ma_make_link($link_text, $url) 
{
  	//return '<div id="magical-modal-link">' . l($link_text, $url.'/nojs', array('attributes' => array('class' => 'ctools-use-modal'))) . '</div>';
  	return '<div id="magical-modal-link">' . l($link_text, $url, array())  . '</div>';

}

function _get_country( $name )
{
	$q = 'select c_name, c_code from dh_country where c_name like \''.$name.'%\' order by c_name limit 10';
	$return = db_query($q);
	$matches = array();
  	foreach ($return as $row) {
    	//$matches[$row->c_code] = $row->c_name;
    	$matches[] = array('value' =>  $row->c_name, 'code' => $row->c_code);
  	}
  	drupal_json_output($matches);  	
}

function _get_state( $name )
{
	$country = $_REQUEST['country'];
	//$country_code = db_query("select c_code from dh_country WHERE c_name='$country'")->fetchField();
	$q = 'select s_code, s_name from dh_state where s_country=\''.$country.'\' and  s_name like \''.$name.'%\' order by s_name limit 10';
	$return = db_query($q);
	$matches = array();
  	foreach ($return as $row) {
    	$matches[] = array('value' => $row->s_name, 'code' => $row->s_code );
  	}
  	drupal_json_output($matches);  	
}

function _get_city( $name )
{
	$country = $_REQUEST['country'];
	//$country_code = db_query("select c_code from dh_country WHERE c_name='$country'")->fetchField();

	$state = $_REQUEST['state'];
	//$state_code = db_query("select s_code from dh_state WHERE s_name='$state'")->fetchField();

	$q = 'select c_name from dh_city where c_country=\''.$country.'\' and c_state=\''.$state.'\' and  c_name like \''.$name.'%\' order by c_name limit 10';
	$return = db_query($q);
	$matches = array();
  	foreach ($return as $row) {
    	$matches[$row->c_name] = $row->c_name;
  	}
  	drupal_json_output($matches);  	
}


function _get_location_from_pincode()
{
	$code = $_REQUEST['code'];
	$matches = array();
	$q = "select co.c_code,s.s_code,ci.c_name as 'c_city' from dh_pin_code p left join dh_city ci on p.pc_city=ci.c_id left join 
		dh_state s on (ci.c_state=s.s_code and ci.c_country=s.s_country) left join dh_country co on ci.c_country=co.c_code where 
		pc_pin='$code' limit 0,1";
	$return = db_query($q);

  	foreach ($return as $row) {
    	$matches[] = array( 'country' => $row->c_code, 'state' => $row->s_code, 'city' => $row->c_city );
  	}

  	drupal_json_output($matches);  	
}

function _get_teacher( $search )
{
	$append = '';
	if (isset($_REQUEST['type']) && ($_REQUEST['type'] == 'full-t') )
		$append = ' and (t_full_t =1 or t_cat = 1 or t_lc_area=1)';
	$matches = array();
	$q = "select CONCAT(t_f_name, ' ', t_l_name, ' (', t_code, ')') as 'a', CONCAT(t_code,'-' ,t_gender) as 'b', CONCAT(t_f_name, ' ', t_l_name) as 'c' from dh_teacher where t_status='Active' and CONCAT(t_f_name, ' ', t_l_name) like '%$search%' $append limit 10";
	$return = db_query($q); // array(':name', $search)

  	foreach ($return as $row) {
    	$matches[] = array('value' =>  $row->a, 'code' => $row->b, 'fullname' => $row->c );
  	}

  	drupal_json_output($matches);  	
}

function _get_trainee_teacher( $search )
{
	$matches = array();
	$q = "select CONCAT(t_f_name, ' ', t_l_name, ' (', t_code, ')') as 'a', CONCAT(t_code,'-' ,t_gender) as 'b', CONCAT(t_f_name, ' ', t_l_name) as 'c' from dh_teacher where t_status='Training' and CONCAT(t_f_name, ' ', t_l_name) like '%$search%' limit 10";
	$return = db_query($q); // array(':name', $search)

  	foreach ($return as $row) {
    	$matches[] = array('value' =>  $row->a, 'code' => $row->b, 'fullname' => $row->c );
  	}

  	drupal_json_output($matches);  	
}

function _search_student()
{
	$app_id = arg(1);
	$q = "select a_f_name,a_l_name,a_dob,a_email,a_zip from dh_applicant where a_id='$app_id'";
	$d = db_query($q)->fetchAssoc();

	if ($d['a_email'] <> '')
		$append = " and a_email='".$d['a_email']."'";
	elseif ($d['a_zip'] <> '')
		$append = " and a_zip='".$d['a_zip']."'";
	else
		$append = " and a_dob='".$d['a_dob']."'";

	$q = "select c_name, a_address, a_attended, a_type, a_status from dh_applicant left join dh_course on a_course=c_id left join dh_type_detail on td_id=c_course_type where a_f_name=:a_f_name and a_l_name=:a_l_name and td_val3 not in ('1-Day') $append order by c_start desc limit 15";
	
	$q_array = array(
		'a_f_name' => $d['a_f_name'],
		'a_l_name' => $d['a_l_name'],
	);

	$result = db_query($q, $q_array);
	$rows = array();
	while($r = $result->fetchAssoc())
	{
		$row = array();
		$row[] = $r['c_name']; 
		$row[] =$r['a_type'];
		$row[] = $r['a_status']; 
		$row[] = $r['a_attended']?'True':'False'; 
		$row[] = $r['a_address']; 
		$rows[] = $row;
	}
	$header = array('Course', 'Type', 'Status', 'Attended', 'Address');
	$out = theme('table', array('header' => $header, 'rows' => $rows));
	print $out;
	exit;
}

function _change_status()
{
	global $user;
	$app_id = arg(1);
	$status = $_REQUEST['s'];
	$letter = $_REQUEST['l'];
	$comment = $_REQUEST['c'];
	if ( !$letter )
		$letter = 0;

	$out = array();
	$out['status'] = 'OK';
	$out['msg'] = '';
	$out['confno'] = '';
	$out['newstatus'] = '';
	if ( $status == 'Approved' || $status == 'R-ATReview')
	{
		$q = "select a_status from dh_applicant where a_id=".$app_id;
		$current_status = db_query($q)->fetchField();
		if ( $current_status == 'R-ATReview' )
		{
			$area_at = db_query('select al_area_at from dh_applicant_lc where al_applicant='.$app_id)->fetchField();
			if ($area_at)
			{
				$status = 'A-ATReview';
				$q = "update dh_applicant_lc set al_recommending_approved='Approved' where al_applicant ='$app_id'";
				db_query($q);				
			}
			else
			{
				$status = 'R-ATReview';
				$out['status'] = 'Failed';
				$out['msg'] = 'Please Edit application and choose Area teacher before approving!';
			}
		}
		elseif ($current_status == 'R-ATTransfer')
		{
			$reco_at = db_query('select al_recommending from dh_applicant_lc where al_applicant='.$app_id)->fetchField();
			if ($reco_at)
			{
				$status = 'R-ATReview';
				$q = "update dh_applicant_lc set al_recommending_approved='Pending' where al_applicant ='$app_id'";
				db_query($q);			
			}
			else 
			{
				$status = 'R-ATTransfer';
				$out['status'] = 'Failed';
				$out['msg'] = 'Please Edit application and choose Recommending teacher before approving!';
			}
		}			
		else
		{
			$status = 'Received';
			$q = "update dh_applicant_lc set al_area_at_approved='Approved' where al_applicant ='$app_id'";
			db_query($q);
		}
		$out['newstatus'] = $status;
		update_status_external($app_id, $status);
	}

	elseif ( in_array($status, array('Rejected-R-AT', 'Rejected-A-AT')) ) 
	{
		if ( $status == 'Rejected-R-AT' )
			$field = 'al_recommending_approved';
		else
			$field = 'al_area_at_approved';
		$q = "update dh_applicant_lc set $field='Rejected' where al_applicant ='$app_id'";
		db_query($q);				
		update_status_external($app_id, $status);	
		$out['newstatus'] = 'Rejected';
	}
	else
	{
		$res = _update_status($app_id, $status);
		$out['confno'] = $res;
		dh_send_letter('applicant', $app_id, $status, $letter, $comment);		
	}

	drupal_json_output($out);
	exit;
}

function _update_status($app_id, $status, $uid=0 )
{
	global $user;
	$fields = array();
	$fields['a_status'] = $status;
	$fields['a_updated_by'] = $uid?$uid:$user->uid;
	$fields['a_updated'] = date("Y-m-d H:i:s");
	$row = db_query("select a_status,a_conf_no from dh_applicant where a_id=$app_id")->fetchAssoc();
	$system_statuses = db_query("select td_key, td_val1 from dh_type_detail where td_type = 'COURSE-SYSTEM-STATUS'")->fetchAllKeyed();
	//$system_status = db_query("select td_key from dh_type_detail where td_key = 'ReConfirmation'")->fetchField();

	if ( $system_statuses['STATUS-CUSTOM'] == $status)
		return '';

	$conf_no = $row['a_conf_no'];


	if (!in_array($status, array($system_statuses['STATUS-CONFIRMED'], $system_statuses['STATUS-EXPECTED'], $system_statuses['STATUS-RECONFIRMATION'], $system_statuses['STATUS-ERROR'])))
	{
		$fields['a_conf_no'] = '';
		$conf_no = '';
	}	
	
	if (($row['a_status'] == $system_statuses['STATUS-EXPECTED']) && ($status == $system_statuses['STATUS-CONFIRMED']))
		return '';

	if ( $row['a_status'] <> $status)
	{
		if ( ($status == $system_statuses['STATUS-CONFIRMED']) && ($row['a_status'] <> $system_statuses['STATUS-RECONFIRMATION']) && (($row['a_status'] <> $system_statuses['STATUS-ERROR']) || ($conf_no == ''))  )
		{
			$conf_no = generate_conf_no($app_id);
			$fields['a_conf_no'] = $conf_no;
		}
		db_update('dh_applicant')->fields($fields)->condition('a_id', $app_id)->execute();
		create_application_pdf($app_id);
	}
	return $conf_no;
}




function dh_daily_activity_form($form, &$form_state)
{
	drupal_add_css( drupal_get_path('module', 'dh_manageapp').'/css/manageapp.css');
	drupal_add_css(drupal_get_path('module', 'dh_manageapp').'/css/select2.min.css');
	drupal_add_js(drupal_get_path('module', 'dh_manageapp').'/js/select2.min.js');


	$max_old_courses =  date('Y-m-d',strtotime("-".variable_get('max_old_courses', '6 month')));
	$q = "select c_id, c_name from dh_course where c_center='".arg(1)."' and c_start >='$max_old_courses' and c_deleted=0  order by c_start";
	$courses = array();
	$courses[''] = 'Choose';
	$courses += db_query($q)->fetchAllKeyed();
	$form['course'] = array('#title' => 'Select Course', '#type' => 'select', '#options' => $courses, '#weight' => 1, );		

	$form['a'] = array('#markup' => '<h3>'.l("Back to Dashboard", "centre/".arg(1)).'</h3>');
	$form['#attributes'] = array('class' => array('container-inline')); 
	$form['date_start'] = array('#title' => 'Select Start Date', '#type' => 'date_popup', '#size' => '20', '#weight' => 2, 
		'#default_value' => date('Y-m-d'), '#date_format' => 'Y-m-d', '#datepicker_options' => array(
    		'maxDate' => 0, '#required' => 1, 
    		'dateFormat' => date_popup_format_to_popup('Y-m-d'),
    	),'#date_year_range' => '-20:0', '#date_label_position' => 'above',
		'#theme_wrappers' => array('date_popup'), '#suffix' => ''); 

	$form['date_end'] = array('#title' => 'Select End Date', '#type' => 'date_popup', '#size' => '20', '#weight' => 3, 
		'#default_value' => date('Y-m-d'), '#date_format' => 'Y-m-d', '#datepicker_options' => array(
    		'maxDate' => 0, '#required' => 1, 
    		'dateFormat' => date_popup_format_to_popup('Y-m-d'),
    	),'#date_year_range' => '-20:0', '#date_label_position' => 'above',
		'#theme_wrappers' => array('date_popup'), '#suffix' => ''); 

	$q = "select uid, name from users u left join dh_user_center uc on u.uid = uc.uc_user where uc_center=".arg(1);
	$users = db_query($q)->fetchAllKeyed();

	$events = array('Status Change' => 'Status Change', 'Letter' => 'Letter', 'Deleted' => 'Deleted', '' => 'Choose');
	$form['event'] = array('#title' => 'Select Event', '#type' => 'select', 
		'#options' => $events, '#default_value' => '', '#weight' => 4);



	$system_uids = db_query("select td_key, td_val1 from dh_type_detail where td_type = 'COURSE-APPLICANT'")->fetchAllKeyed();
	$users[$system_uids['COURSE-APPLICANT-UID']] = 'Applicant';
	$users[$system_uids['COURSE-SYSTEM-UID']] = 'System';	
	$users[''] = 'Choose'; 
	$form['user'] = array('#title' => 'Select user', '#type' => 'select', 
		'#options' => $users, '#default_value' => '', '#weight' => 5);


	$form['sub'] = array('#value' => 'Submit', '#type' => 'submit', '#weight'=> 10);

	if ( isset($form_state['storage']) )
	{
		$storage = $form_state['storage'];
		$out = dh_activity_search_results( arg(1), $storage['date_start'], $storage['date_end'], $storage['event'], $storage['course'], $storage['user'] );
		$form['out'] = array('#markup' => $out, '#weight' => 100);
	}

	$js = '

		(function ($) {
		$(document).ready(function(){
			$("#edit-course").select2();
			$("#table-daily-activity").DataTable();
		})
	})(jQuery);

	';
	drupal_add_js($js, 'inline');
	return $form;
}

function dh_daily_activity_form_submit($form, &$form_state)
{
	$form_state['storage'] = $form_state['input'];
	$form_state['rebuild'] = TRUE;
}

function dh_activity_search_results( $centre, $date_start, $date_end, $event, $course, $user = '' )
{
	if (is_array($date_start))
		$date_start = $date_start['date'];
	if (is_array($date_end))
		$date_end = $date_end['date'];
	drupal_add_css( libraries_get_path("editor"). "/DataTables/datatables.min.css");
	drupal_add_js( libraries_get_path("editor").  "/DataTables/datatables.min.js");

	$append = '';
	if ($user <> '' )
		$append .= " and l_user='$user' ";

	if ($course <> '' )
		$append .= " and c.c_id='$course' ";

	if ($event <> '' )
		$append .= " and l_event='$event' ";

	$q = "select CONCAT(a_f_name,' ',a_l_name) as 'Applicant', c.c_name as 'Course Name', l_event,l_msg, u.name, l_tstamp from dh_log l left join dh_applicant a on (l.l_identifier=a.a_id and l.l_module='Applicant') left join dh_course c on (a.a_course=c.c_id) left join users u on (l.l_user=u.uid) where DATE_FORMAT(l_tstamp,'%Y-%m-%d') >= '$date_start' and DATE_FORMAT(l_tstamp,'%Y-%m-%d') <= '$date_end' and l_center='$centre' and l_module='Applicant' $append order by l_tstamp desc";

	$header = array('Applicant Name', 'Course Name', 'Event', 'Message', 'User', 'DateTime');
	$results = 	db_query($q);
	$rows = array();
	while($r = $results->fetchAssoc())
	{
		$rows[] = $r;
	}
	$attributes = array('id' => 'table-daily-activity');

	if (!empty($rows))
		$out = '<br>'.theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => $attributes));
	return $out;
}

function _search_course()
{
	$centre_id = arg(1);
	$course_id = arg(2);
	$status = $_REQUEST['s'];
	$old = $_REQUEST['t'];

	$app_type = '';
	if (isset($_REQUEST['at']))
		$app_type = ($_REQUEST['at']=='s')?'Sevak':'Student';


	if (isset($_REQUEST['d']))
		$type = $_REQUEST['d'];
	else
		$type = 'a';

	if ($type == 's')
		$type = 'student';
	else
		$type = 'applicant';


	if ( ! (user_access("access male") && (user_access("access female"))) )
	{
		if ( user_access("access male") ) $gender = 'M'; else $gender = 'F'; 
		//$where .= " and a_gender ='$gender'";
	}
	else	
		$gender = $_REQUEST['g'];

	$field = 'a_course'; 
	if ($type == 'student') $field = 'sc_course';
	$where = " $field=$course_id";
	$msg = "";
	$temp = explode(",", $status);

	if ($app_type <> '')
		$where .= " and a_type='$app_type'";

	if ( $status <> '' )
	{
		if ( $type == 'applicant')
		{
			if (count($temp) > 0)
				$where .= " and a_status IN ('".implode("','", $temp)."') ";
			else
				$where .= " and a_status ='$status' ";
			$msg .= 'Status: '.$status;			
		}
	}
	else
		$msg .= 'Status: All';
		
	if ( $gender <> '' )
	{
		$field = 'a_gender';
		if ($type == 'student') $field = 's_gender';
		$where .= " and $field ='$gender' ";
		$msg .= ', Gender: '.($gender=='M'?'Male':'Female');						
	}
	if ( $old <> '' )
	{
		if ( $type == 'student' )
		{
			$temp = !$old;
			$where .= " and s_first ='$temp' ";			
		}
		else
			$where .= " and a_old ='$old' ";
		$msg .= ($old?'Old':'New');
	}

	$out = '<h3>'.$msg.' ('.l("Back to Course", "course/".$centre_id."/".$course_id).')&nbsp;&nbsp;|&nbsp;&nbsp; ('.l("Back to Dashboard", "centre/".$centre_id).')&nbsp;&nbsp;|&nbsp;&nbsp;'.l("Add Applicant", "app/add/$centre_id/$course_id").'</h3>';
	$out .= dh_manageapp_search_results( $type, $where, $centre_id );
	$out .= '<h3>('.l("Back to Course", "course/".$centre_id."/".$course_id).')&nbsp;&nbsp;|&nbsp;&nbsp; ('.l("Back to Dashboard", "centre/".$centre_id).')&nbsp;&nbsp;</h3>';
	return $out;
}

function _get_clarifications()
{
	$app_id = arg(1);
	$q = "select ac_msg, ac_file, ac_tstamp, ac_id from dh_applicant_clarification where ac_app='$app_id'";
	$res = db_query($q);
	$rows = array();
	while( $row = $res->fetchAssoc())
	{
		$r = array();
		$r[] = $row['ac_tstamp'];
		$r[] = $row['ac_msg'];
		if ($row['ac_file'])
		{
			//$r[] = l("View", file_create_url($row['ac_file']));
			$r[] = l("View", "show-clarification/$app_id/".$row['ac_id']);
		}
		else
			$r[] = 'No Upload';
		$rows[] = $r;
	}
	$header = array('DateTime', 'Message', 'File');
	$out = '';
	if (!empty($rows))
		$out = theme('table', array('header' => $header, 'rows' => $rows));
	print $out;
	exit;
}

function _get_activity()
{
	$app_id = arg(1);
	$q = "select l_msg , name, l_tstamp from dh_log left join users on l_user=uid where l_module='Applicant' and l_identifier='$app_id' and l_event in ('Status Change', 'Letter', 'LC Workflow') order by l_tstamp desc";
	$res = db_query($q);
	$rows = array();
	while( $row = $res->fetchAssoc())
	{
		$r = array();
		$r[] = $row['l_tstamp'];
		$r[] = $row['l_msg'];
		$r[] = $row['name'];
		$rows[] = $r;
	}
	$header = array('DateTime', 'Activity', 'User');
	$out = '<h4>Activity Log</h4>';
	if (!empty($rows))
		$out .= theme('table', array('header' => $header, 'rows' => $rows)) ;
	print $out;
	exit;
}

function _move_to_centre_course()
{
	global $user;
	$app_id = arg(1);
	$new_course = arg(2);
	$new_centre = arg(3);
	$rs = db_query("select a_center, a_course from dh_applicant where a_id=".$app_id)->fetchAssoc();

	$centres_allowed = array();
	if (!user_access("access other center courses"))
	{
		$q = "Select c_id, c_id from dh_center left join dh_user_center uc on c_id=uc_center where uc_user='".$user->uid." and uc_deleted=0'";
		$centres_allowed = db_query($q)->fetchAllKeyed();
	}

	if ( (!user_access("access other center courses"))  && ( !in_array($new_centre, $centres_allowed) ))
	{
		$out = array();
		$out['status'] = 'Failed';
		$out['msg'] = 'No access to other centre';
		drupal_json_output($out);
		exit;
	}

	$course_name = db_query("select c_name from dh_course where c_id=".$rs['a_course'])->fetchField();
	$centre_name = db_query("select c_name from dh_center where c_id =".$rs['a_center'])->fetchField();

	$SYSTEM_RECEIVED = db_query("select td_val1 from dh_type_detail where td_type='COURSE-SYSTEM-STATUS' and td_key='STATUS-RECEIVED'")->fetchField();
	$comment = '';
	if ( $_REQUEST['c'] <> '' )
	{
		$comment .= " (".$_REQUEST['c'].")";
	}

	$fields = array();
	$fields['l_center'] = $rs['a_center'];
	$fields['l_module'] = 'Applicant';
	$fields['l_identifier'] = $app_id;
	$fields['l_event'] = 'Status Change';
	$fields['l_msg'] = 'Transferred from '.$course_name.$comment;
	$fields['l_user'] = $user->uid;
	db_insert('dh_log')->fields( $fields )->execute();


	$fields = array();
	$fields['a_course'] = $new_course;
	$fields['a_center'] = $new_centre;
	$fields['a_status'] = $SYSTEM_RECEIVED; //STATUS_RECEIVED;
	$fields['a_conf_no'] = '';
	db_update('dh_applicant')->fields($fields)->condition('a_id', $app_id)->execute();
	$out = array();
	$out['status'] = 'OK';
	$out['msg'] = '';
	drupal_json_output($out);
	exit;

}


function _delete_app()
{
	$out['status'] = 'OK';
	$out['msg'] = '';
	app_delete(arg(1));
	drupal_json_output($out);	
}

function generate_conf_no( $app_id )
{
	$q = "select a_gender, a_course, a_old, a_type from dh_applicant where a_id=$app_id";
	$row = db_query($q)->fetchAssoc();
	if ( strtolower($row['a_type']) == 'sevak' )
		$pre = 'S'.$row['a_gender'];
	else
		$pre = ($row['a_old']?'O':'N').$row['a_gender'];
	$new_conf_no = $pre.db_query("select nextval1('".$row['a_course']."-$pre')")->fetchField();
	return $new_conf_no;
}

function update_status_external($app_id, $new_status)
{
	global $user;
	$row = db_query("select a_status,a_conf_no,a_center,a_course,a_gender,a_old,a_type from dh_applicant where a_id=$app_id")->fetchAssoc();
	$system_statuses = db_query("select td_key, td_val1 from dh_type_detail where td_type='COURSE-SYSTEM-STATUS'")->fetchAllKeyed();
	$user_ids = db_query("select td_key, td_val1 from dh_type_detail where td_type='COURSE-APPLICANT'")->fetchAllKeyed();

	//$UID_APPLICANT = db_query("select td_val1 from dh_type_detail where td_type='COURSE-APPLICANT' and td_key='COURSE-APPLICANT-UID'")->fetchField();
	//$UID_SYSTEM = db_query("select td_val1 from dh_type_detail where td_type='COURSE-APPLICANT' and td_key='COURSE-SYSTEM-UID'")->fetchField();
	$q  = "select td_val3, td_key, IFNULL(a_xml_id,0) as 'xml_id' from dh_applicant a left join dh_course c on a.a_course=c.c_id left join dh_type_detail td on c.c_course_type=td.td_id where a.a_id=".$app_id;
	$c_data = db_query($q)->fetchAssoc();
	$is_lc = $c_data['td_val3']=='LC'?1:0;
	$xml_id = $c_data['xml_id'];
	$c_type = $c_data['td_key'];
	if ( in_array($new_status, array('Received')) )
	{
		// set referral
		set_referral( $app_id );
		
		dh_course_status_check( $row['a_center'], $c_type, $row['a_gender'], $row['a_course'] );
		if (!$is_lc)
		{
			if (applicant_should_be_waitlisted($row['a_center'], $row['a_course'], $row['a_type'], $row['a_gender'], $row['a_old'], $app_id  ))
			{
				$new_status = 'WaitList';
			}			
		}
	}

	if ( ($row['a_status'] <> $new_status) )
	{
		if ($is_lc &&  ($xml_id == 0) )
		{
			$q = "select al_recommending_approved, al_area_at_approved from dh_applicant_lc where al_applicant=$app_id";
			$lc_row = db_query($q)->fetchAssoc();
			$altered_status = $new_status;
			if ($lc_row)
			{
				$reco_done = $lc_row['al_recommending_approved'];
				$area_done = $lc_row['al_area_at_approved'];
				if ( $new_status == 'Received' )
				{
					switch ($area_done) 
					{
						case 'Approved':
							$altered_status = 'Received';
							break;
						case 'Rejected':
							$altered_status = 'Rejected';
							break;	
						default:
							switch ($reco_done) 
							{
								case 'Approved':
									$altered_status = 'A-ATReview';
									break;
								case 'Rejected':
									$altered_status = 'Rejected';
									break;	
								default:
									$altered_status = 'R-ATReview';
									break;
							}
							break;
					}
				}
				elseif ( in_array($new_status, array('Rejected-R-AT', 'Rejected-A-AT')) ) 
				{
					$altered_status = 'Rejected';
				}
			}
			else
				$altered_status = 'R-ATReview';

			$uid = $user_ids['COURSE-APPLICANT-UID'];
			if ( $altered_status == 'A-ATReview' )
				$uid = $user_ids['COURSE-R-AT-UID'];
			elseif ( $altered_status == 'Received' ) 
				$uid = $user_ids['COURSE-A-AT-UID'];

			if (($new_status == 'Rejected-R-AT') && ($altered_status == 'Rejected'))
				$uid = $user_ids['COURSE-R-AT-UID'];
			elseif ( ($new_status == 'Rejected-A-AT') && ($altered_status == 'Rejected') ) 
				$uid = $user_ids['COURSE-A-AT-UID'];

			if ($user->uid > 0)
				$uid = $user->uid;
			_update_status($app_id, $altered_status , $uid);	
			if (in_array($new_status, array('Received', 'A-ATReview', 'R-ATReview')))
			{
				if ( in_array($altered_status, array('R-ATReview'))  || (($altered_status == 'A-ATReview') && ($new_status == 'Received')) )
					if ($new_status <> 'R-ATReview')
						dh_send_letter('applicant', $app_id, $new_status );
			}
			else
			{
				if ( (($new_status == 'Rejected-R-AT') && ($altered_status == 'Rejected')) || (($new_status == 'Rejected-A-AT') && ($altered_status == 'Rejected')) )
				{
					$letter_map = array('Rejected-R-AT' => 'Recommending AT Rejected', 'Rejected-A-AT' => 'Area AT Rejected') ;
					$centre = db_query("select a_center from dh_applicant where a_id=$app_id")->fetchField();
					$lid = db_query("select l_id from dh_letter where l_name='".$letter_map[$new_status]."' and l_center='$centre' limit 1")->fetchField();
					if ($lid)
						dh_send_letter('applicant', $app_id, 'Custom', $lid );	
					else
					{
						$log = "No ".$letter_map[$new_status]." letter found!";
						logit($centre,  'Letter', $app_id, $log );
					}
				}
				else				
					dh_send_letter('applicant', $app_id, $altered_status );
			}
			if (($new_status == 'A-ATReview') || ($altered_status == 'A-ATReview') )
				dh_send_letter('a-teacher', $app_id, $altered_status);
			elseif (($new_status == 'R-ATReview' ) ||  ($altered_status == 'R-ATReview') )
			{
				dh_send_letter('r-teacher', $app_id, $altered_status );
				
				$centre = db_query("select a_center from dh_applicant where a_id=$app_id")->fetchField();
				$lc_admin_email = db_query("select c_lc_admin_email from dh_center where c_id=$centre")->fetchField();
				if ($lc_admin_email)
				{

					$lid = db_query("select l_id from dh_letter where l_name='LC Admin Notification' and l_center='$centre' limit 1")->fetchField();
					//watchdog('LC ADMIN', 'I got lid '.$lid);
					if ($lid)
						dh_send_letter('lc-admin', $app_id, 'Custom', $lid );					
				}
			}

			if ( in_array($altered_status, array('A-ATReview', 'Received')) )
			{
				$letter_map = array('A-ATReview' => 'Recommending AT Approved', 'Received' => 'Area AT Approved') ;
				$centre = db_query("select a_center from dh_applicant where a_id=$app_id")->fetchField();
				$lid = db_query("select l_id from dh_letter where l_name='".$letter_map[$altered_status]."' and l_center='$centre' limit 1")->fetchField();
				if ($lid)
					dh_send_letter('applicant', $app_id, 'Custom', $lid );	
				else
				{
					$log = "No ".$letter_map[$altered_status]." letter found!";
					logit($centre,  'Letter', $app_id, $log );
				}
			}
		}
		else
		{
			$uid = $user_ids['COURSE-SYSTEM-UID'];
			if ( in_array($new_status, array('Clarification-Response', 'Confirmed', 'Cancelled')) )
				$uid = $user_ids['COURSE-APPLICANT-UID'];
			_update_status($app_id, $new_status, $uid );
			dh_send_letter('applicant', $app_id, $new_status );
		}	
	}
	else
		watchdog('Applicant', "ID $app_id - New status $new_status, old status is ".$row['a_status']);
}

function dh_app_update_attended()
{
	global $user;
	$app_id = arg(1);
	$r = db_query("select a_course, a_center, a_gender, c_start from dh_applicant left join dh_course on c_id=a_course where a_id=$app_id")->fetchAssoc();
	$course_id = $r['a_course'];
	$centre_id = $r['a_center'];
	$gender = $r['a_gender'];
	$res = false;
	$out = array();
	if ( $_REQUEST['a'] == 'false' )
	{
		$app['a_attended'] = 0;
		db_update('dh_applicant')->fields($app)->condition('a_id', $app_id)->execute();
		db_query("delete from dh_applicant_attended where aa_applicant=".$app_id);
		$out['msg'] = 'Ok';
		$out['status'] = true; 
		$out['applicant'] = dh_manageapp_list( $centre_id, $course_id );
		$out['attended'] = dh_manageapp_attended( $centre_id, $course_id )	;	
		$out['acco'] = dh_get_acco( $centre_id , $course_id );
		$out['alloted'] = dh_get_alloted( $centre_id , $course_id);

		drupal_json_output($out);
		exit;
	}

	if (strtotime(date('Y-m-d')) <= strtotime($r['c_start']))
	{

		if ($_REQUEST['s'] == '')
		{
			$out['msg'] = 'Please select room section';
			$out['status'] = false; 
			drupal_json_output($out);
			exit;
		}
		if ($_REQUEST['r'] == '')
		{
			$out['status'] = false; 
			$out['msg'] = 'Please select room no';
			drupal_json_output($out);
			exit;
		}
	}

	$fields['aa_section'] = $_REQUEST['s'];
	$fields['aa_acco'] = $_REQUEST['r'];
	$fields['aa_group'] = $_REQUEST['g'];
	$fields['aa_laundry'] = $_REQUEST['l'];
	$fields['aa_valuable'] = $_REQUEST['v'];
	$fields['aa_cell'] = $_REQUEST['c'];

	$fields['aa_cell_fixed'] = ($_REQUEST['cf'] == 'true')?1:0;
	if ($fields['aa_cell_fixed'])
		$fields['aa_cell_group'] = '0';
	$fields['aa_chowky'] = ($_REQUEST['chow'] == 'true')?1:0;
	$fields['aa_chair'] = ($_REQUEST['chai'] == 'true')?1:0;
	$fields['aa_backrest'] = ($_REQUEST['back'] == 'true')?1:0;
	$fields['aa_comment'] = $_REQUEST['comment'];
	$fields['aa_updated_by'] = $user->uid;
	$fields['aa_updated'] = date('Y-m-d H:i:s');

	if ( !dh_manageapp_lock_acquire("dh_app_update_attended", 10.0, 10) )
	{
		$out['status'] = false; 
		$out['msg'] = 'Unable to get lock';
		drupal_json_output($out);
		exit;				
	}

	$check_id = db_query("select aa_id from dh_applicant_attended left join dh_applicant on aa_applicant=a_id where a_course=$course_id and a_gender='$gender' and  aa_section='".$fields['aa_section']."' and aa_acco='".$fields['aa_acco']."' and aa_applicant <> '$app_id'")->fetchField();
	if ($check_id > 0 && (strtotime(date('Y-m-d')) <= strtotime($r['c_start']) ) )
	{
		$out['status'] = false; 
		$out['msg'] = 'Room has already been alloted';
		drupal_json_output($out);
		exit;		
	}

	$lv_check = db_query("select aa_id from dh_applicant_attended left join dh_applicant on aa_applicant=a_id where a_course=$course_id and a_gender='$gender' and ((aa_laundry='".$fields['aa_laundry']."' and aa_laundry <> '') or (aa_valuable='".$fields['aa_valuable']."' and aa_valuable <> '')) and aa_applicant <> '$app_id'")->fetchField();
	if ($lv_check > 0 && (strtotime(date('Y-m-d')) <= strtotime($r['c_start']) ) )
	{
		$out['status'] = false; 
		$out['msg'] = 'Valuable/Laundry token has already been alloted';
		drupal_json_output($out);
		exit;		
	}

	$attended_id = db_query("select aa_id from dh_applicant_attended where aa_applicant=$app_id")->fetchField();

	if ( $attended_id > 0)
	{
		db_update('dh_applicant_attended')->fields($fields)->condition('aa_applicant', $app_id)->execute();
	}
	else
	{
    $chowky_chair = ($fields['aa_chowky'] || $fields['aa_chair'])?" and (aa_chowky=1 or aa_chair=1) ":" and aa_chowky=0 and aa_chair=0 ";
    $max_row = db_query("select max(aa_seat_row) from dh_applicant_attended aa left join dh_applicant a on aa.aa_applicant=a.a_id where a_course='$course_id' and a_gender='$gender' and a_type='Student' $chowky_chair")->fetchField();
    $fields['aa_seat_row'] = $max_row + 1;
    $fields['aa_seat_col'] = 0;
		$system_statuses = db_query("select td_key, td_val1 from dh_type_detail where td_type = 'COURSE-SYSTEM-STATUS'")->fetchAllKeyed();
		_update_status( $app_id, $system_statuses['STATUS-CONFIRMED'] );
		
		$app['a_attended'] = 1;
		db_update('dh_applicant')->fields($app)->condition('a_id', $app_id)->execute();

		$fields['aa_applicant'] = $app_id;
		$fields['aa_created_by'] = $user->uid;
		db_insert('dh_applicant_attended')->fields($fields)->execute();		
	}
	lock_release("dh_app_update_attended");

  create_application_pdf($app_id);

	$out['msg'] = 'Ok';
	$out['status'] = true; 
	$out['applicant'] = dh_manageapp_list( $centre_id, $course_id );
	$out['attended'] = dh_manageapp_attended( $centre_id, $course_id )	;	
	$out['acco'] = dh_get_acco( $centre_id , $course_id );
	$out['alloted'] = dh_get_alloted( $centre_id , $course_id);

	drupal_json_output($out);
	exit;

}


function generate_random_str($length = 10) 
{
    return substr(str_shuffle(str_repeat($x='0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', ceil($length/strlen($x)) )),1,$length);
}


function logit($centre, $event, $app_id, $msg, $uid = 0 )
{
	global $user;
	$log_uid = $uid?$uid:$user->uid;
	if ( $log_uid <=0 ) 
		$log_uid = 	db_query("select td_val1 from dh_type_detail where td_type='COURSE-APPLICANT' and td_key='COURSE-SYSTEM-UID'")->fetchField();
	$fields['l_user'] = $log_uid;
	$fields['l_center'] = $centre;
	$fields['l_msg'] = $msg;
	$fields['l_module'] = 'Applicant';
	$fields['l_event'] = $event;
	$fields['l_identifier'] = $app_id;
	db_insert('dh_log')->fields($fields)->execute();
}

function simple_crypt( $string, $action = 'e' )
{
    // you may change these values to your own
    $secret_key = 'DHAMMA4ALL_ANICCA';
    $secret_iv = 'THIS_IS_THE_END';

    $output = false;
    $encrypt_method = "AES-256-CBC";
    $key = hash( 'sha256', $secret_key );
    $iv = substr( hash( 'sha256', $secret_iv ), 0, 16 );

    if( $action == 'e' ) {
        $output = base64_encode( openssl_encrypt( $string, $encrypt_method, $key, 0, $iv ) );
    }
    else if( $action == 'd' ){
        $output = openssl_decrypt( base64_decode( $string ), $encrypt_method, $key, 0, $iv );
    }
    return $output;
}


function dh_manageapp_lock_acquire($name, $timeout = 30.0, $delay = 30) 
{
  return (
    lock_acquire($name, $timeout)
    || (
      !lock_wait($name, $delay)
      && lock_acquire($name, $timeout)
    )
  );
}



function _get_student_cancel_count()
{
    global $user;
    $c_course = arg(1);
    $CourseArr = (explode(",", $c_course));
    foreach ($CourseArr as $key => $value) 
    {
         $q = "SELECT count(a_id) as TotalApplicant from dh_applicant where a_course= '".$value."' ";
        $result = db_query($q);
        while ($r = $result->fetchAssoc()) 
        {
            $ApplicantCount = $r['TotalApplicant'];
            if ($ApplicantCount > 0) 
            {
                $row['ApplicantFound'] = 'Yes';
                break;
            } else 
            {
                $row['ApplicantFound'] = 'No';
            }
        }
        if ($row['ApplicantFound'] == 'Yes') 
        {
            break;
        }
    }
    drupal_json_output($row);
    exit;
}

function _get_student_finalize()
{
    global $user;
    $c_course = arg(1);

    $q = "SELECT count(a_attended) as TotalAttended,
      td.td_key as CourseType,
      c_list_only as ListOnly
      from dh_applicant a
      left join dh_course c on a.a_course=c.c_id
      left join dh_type_detail td on c.c_course_type=td.td_id
      where c_end <= CURDATE() and a_attended=1 and a_course=$c_course";
    $result = db_query($q);
    $Count = $result->rowCount();
    if ($Count > 0) 
    {
        $rows = array();
        while ($r = $result->fetchAssoc()) 
        {
            $row = array();
            $row['Count'] = intval($r['TotalAttended']);
            if ($r['CourseType'] == '1-DayOSC' || $r['ListOnly'])
              $row['Count'] = 1;
        }
    } else 
    {
        $row['Count'] = 0;
    }
    drupal_json_output($row);
    exit;
}

function _get_sms_count()
{
	$course_id = arg(1);
	$q = "select l_id,l_name, SUM(cs_credits_used) as 'Count' from dh_center_sms left join dh_course on cs_course = c_id left join dh_letter on cs_letter = l_id where cs_course=$course_id group by l_name order by l_name";
	$res = db_query($q);
	$rows = array();
	while( $row = $res->fetchAssoc())
	{
		$r = array();
		$r[] = $row['l_id'];
		$r[] = $row['l_name'];
		$r[] = $row['Count'];
		$rows[] = $r;
	}
	$header = array('Letter ID','Letter Name','SMS Count');
	$out = theme('table', array('header' => $header, 'rows' => $rows)) ;
	print $out;
	exit;
}

function show_application_pdf( $app_id )
{
	$q = "select a_uri from dh_applicant where a_id=".$app_id;
	$url = db_query($q)->fetchField();

	$url = str_replace("private:///", '', $url);
	$ret = s3_get_file(variable_get('s3_bucket_name', ''), $url, 'stream');
	if (!$ret['success'])
		watchdog('S3PDF', $ret['message']);

	header("Content-Type: application/pdf");
	header('Content-disposition:inline; filename="'.basename($url).'"');
	header('Cache-Control: private');
	// If you're serving to IE 9, then the following may be needed
	//header('Cache-Control: max-age=1');
	if (!$ret['success'])
		watchdog('S3Debug', print_r($ret, true));
	print($ret['data']);
	exit();

}


function show_application_photo( $app_id )
{
	$q = "select a_photo from dh_applicant where a_id=".$app_id;
	$url = db_query($q)->fetchField();

	$url = str_replace("private://", '', $url);
	$ret = s3_get_file(variable_get('s3_bucket_name', ''), $url, 'stream');
	if (!$ret['success'])
		watchdog('S3PDF', $ret['message']);

	$parts = pathinfo($url);
	$content_type = "image/jpeg";
	if (strtolower($parts['extension']) == 'png')
		$content_type = "image/png";

	header("Content-Type: $content_type");
	//header('Content-disposition:inline; filename="'.basename($url).'"');
	//header('Cache-Control: private');
	// If you're serving to IE 9, then the following may be needed
	//header('Cache-Control: max-age=1');
	print($ret['data']);
	exit();

}


function show_clarification( $app_id, $clarification_id )
{
	$q = "select ac_file from dh_applicant_clarification where ac_id=".$clarification_id." and ac_app=".$app_id;
	$url = db_query($q)->fetchField();

	$url = str_replace("private:///", '', $url);
	$ret = s3_get_file(variable_get('s3_bucket_name', ''), $url, 'stream');
	if (!$ret['success'])
		watchdog('S3PDF', $ret['message']);

	header("Content-Type: application/pdf");
	header('Content-disposition:inline; filename="'.basename($url).'"');
	header('Cache-Control: private');

	print($ret['data']);
	exit();

}

function whatsapp_hook()
{
	$LOG = "/var/log/whatsapp.log";
	$data = $_REQUEST;
	if ( empty($data) )
	   $data = json_decode( file_get_contents( 'php://input' ), true );

	if (! empty($data))
	{
	    if ( is_array($data) && (isset($data['statuses'])) && (is_array($data['statuses'])) )
	    {
	        $msgs = array();
	        foreach($data['statuses'] as $r )
	        {
	           if ( isset($r['id']) && (isset($r['recipient_id'])) && (isset($r['status'])) )
	           {
					$msgs[] = $r['id']." | ".$r['recipient_id']." | ".$r['status']." | ".$r['timestamp'] ;
					if (!in_array($r['status'], array('sent', 'delivered')))
						file_put_contents($LOG, "[".date("Y-m-d H:i:s")."] ".print_r($r, true)."\n", FILE_APPEND);
	           }
	        }
	        if (count($msgs) > 0)
	        {
	           $log_data = implode("\n" , $msgs);
	           file_put_contents($LOG, "[".date("Y-m-d H:i:s")."] ".$log_data."\n", FILE_APPEND);
	        }
	    }
	    elseif (is_array($data) && (isset($data['messages'])) && (is_array($data['messages'])))
	    {
	    	file_put_contents($LOG, "[".date("Y-m-d H:i:s")."] ".print_r($data, true)."\n", FILE_APPEND);
	    	foreach($data['messages'] as $msg)
	    	{
	    		if (isset($msg['from']) && (isset($msg['text'])) && (is_array($msg['text'])) && (isset($msg['text']['body'])) )
	    		{
	    			//handle_whatsapp_msg($msg['from'], $msg['text']['body']);
	    			push_to_queue( 'Dipi', 'whatsapp', json_encode( array('from' => $msg['from'], 'msg' => $msg['text']['body'])) );
	    		}
	    	}
	    }
	    else
	       file_put_contents($LOG, "[".date("Y-m-d H:i:s")."] ".print_r($data, true)."\n", FILE_APPEND);
	}
	echo "OK";
	exit(0);
}


function push_to_queue( $vhost, $queue, $msg, $ttl = 180000 )
{
	try 
	{
		$connection = new AMQPStreamConnection(variable_get('mq_host', ''), (int)variable_get('mq_port', ''), variable_get('mq_user'), variable_get('mq_passwd'), $vhost);
		$channel = $connection->channel();

		$channel->queue_declare($queue, false, true, false, false, false, array('x-message-ttl' => ['I', $ttl ]) );
		$channel->exchange_declare($queue, AMQPExchangeType::DIRECT, false, true, false);

		$channel->queue_bind($queue, $queue);

		$message = new AMQPMessage($msg, array('content_type' => 'application/json', 'delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT));
		$channel->basic_publish($message, $queue);

		$channel->close();
		$connection->close();
		
	} catch (\Throwable $e) {
		watchdog('RabbitMQ', 'push_to_queue: '.$e->getMessage()."\n".$e->getTraceAsString(), array(), WATCHDOG_NOTICE);
	}

}


function whatsapp_consumer_callback($msg)
{
	try {
	    $data = json_decode($msg->body);
	    $ret = handle_whatsapp_msg( $data->from, $data->msg );
	    echo $data->from." -> ".$data->msg."\n";
	    $ret = True;
	    if ( $ret )
	    {
	        $msg->ack();
	    }
		
	} catch (\Throwable $e) {
		watchdog('RabbitMQ', 'whatsapp_consumer: '.$e->getMessage()."\n".$e->getTraceAsString(), array(), WATCHDOG_NOTICE);
	}

};


function whatsapp_consumer($vhost, $queue )
{
	$connection = new AMQPStreamConnection(variable_get('mq_host', ''), (int)variable_get('mq_port', ''), variable_get('mq_user'), variable_get('mq_passwd'), $vhost);
	$channel = $connection->channel();

	$channel->queue_declare($queue, false, true, false, false, false, array('x-message-ttl' => ['I', 180000 ]) );
	$channel->exchange_declare($queue, AMQPExchangeType::DIRECT, false, true, false);

	$channel->queue_bind($queue, $queue);

	$channel->basic_consume($queue, '', false, false, false, false, 'whatsapp_consumer_callback');

	$channel->consume();

   $count = 0;
}


// eg for $add_options
//   array(
//     'cc' => $cc,
//     'bcc' => $bcc,
//     'v:at-app-id' => $at_app_id,
//     'attachment' => array(
//       array('filePath' => $a, 'filename' => basename($a)),
//       array('filePath' => $b, 'filename' => basename($b)),
//     ),
//   )

function send_email_generic( $to, $from_email, $from_name, $subject, $body, $add_options = array() )
{
  try
  {
    $from = $from_name.'<'.$from_email.'>';
    $mg = Mailgun::create(variable_get('mailgun_key', ''));

    $test_mode = variable_get('mode_test', '0');

    if ( $test_mode )
      $to = variable_get('mode_test_emails', '');

    $options = array(
      'from'    => $from,
      'to'      => $to,
      'subject' => $subject,
      'html'    => $body,
      'v:test-mode' => $test_mode,
    );

    if ( count($add_options) > 0)
    {
      $options = array_merge($options, $add_options);
      if ( $test_mode )
      {
        if( $options['cc'] )
          unset($options['cc']);

        if( $options['bcc'] )
          unset($options['bcc']);
      }
    }

    $mailgun_domain = get_mailgun_domain($from);
    $res = $mg->messages()->send($mailgun_domain, $options );
    $mid = $res->getId();
    watchdog('SendEmailGeneric', "Email sent to ".$to." (".$mid.")");
    return array('success' => True, 'msg' => $mid);
  }
  catch(Throwable $e)
  {
    watchdog('SendEmailGenericError', "Error sending Email to ".$to." (".$e->getMessage().")");
    return array('success' => False, 'msg' => $e->getMessage());
  }

}

function dipi_mail_consumer_callback($msg)
{
	try {
	    $data = json_decode($msg->body);
	    $ret = dh_send_letter('applicant', $data->applicant_id, 'Custom', $data->letter_id);
	    $ret = True;
	    if ( $ret )
	    {
	        $msg->ack();
	    }
		
	} catch (\Throwable $e) {
		watchdog('RabbitMQ', 'dipi_mail_consumer: '.$e->getMessage()."\n".$e->getTraceAsString(), array(), WATCHDOG_NOTICE);
	}

};


function dipi_mail_consumer($vhost, $queue )
{
	$connection = new AMQPStreamConnection(variable_get('mq_host', ''), (int)variable_get('mq_port', ''), variable_get('mq_user'), variable_get('mq_passwd'), $vhost);
	$channel = $connection->channel();

	$channel->queue_declare($queue, false, true, false, false, false, array('x-message-ttl' => ['I', 86400000 ]) );
	$channel->exchange_declare($queue, AMQPExchangeType::DIRECT, false, true, false);

	$channel->queue_bind($queue, $queue);

	$channel->basic_consume($queue, '', false, false, false, false, 'dipi_mail_consumer_callback');

	$channel->consume();

   $count = 0;
}


function whatsapp_hook_bulk()
{
	$LOG = "/var/log/whatsapp-bulk.log";
	$data = $_REQUEST;
	if ( empty($data) )
	   $data = json_decode( file_get_contents( 'php://input' ), true );


	if (! empty($data))
	{
		file_put_contents($LOG, "[".date("Y-m-d H:i:s")."] ".print_r($data, true)."\n", FILE_APPEND);
	}
	exit(0);
}
