<?php



/**
 * Implements hook_permission().
 */
function dipi_api_permission() {

    $perms['get all centres'] = array('title' => t('Access all centres') ) ;
    $perms['get all courses'] = array('title' => t('Access all courses') ) ;
    $perms['post application'] = array('title' => t('Post an application to a course') ) ;
    $perms['access sms api'] = array('title' => t('Access SMS API') );
    $perms['access voice api'] = array('title' => t('Access VOICE API') );
    $perms['get application status'] = array('title' => t('Access Application Status') );
    $perms['at portal access'] = array('title' => t('Access AT Portal APIs'));
    $perms['zero day by conf num access'] = array('title' => t('Access Zero Day by Conf Num'));

    return $perms;
}

/**
 * Implements hook_services_resources().
 */
function dipi_api_services_resources() {

  $resources = array(
    '#api_version' => '3001',
    'dipi' => array(
        'actions' => array(
            'centres-updated-last-n-hours' => array(
                    'help' => t("Get Centres"),
                    'access arguments' => array('get all centres'),
                'access arguments append' => FALSE,
                    'callback' => '_api_centres_get',
              'args' => array(
                array(
                  'name' => 'lastupdated',
                  'optional' => FALSE,
                  'source' => array('path' => 1),
                  'type' => 'int',
                  'description' => 'Centres updated in last n hours',
                ),
              ),
            ),

        'courses-updated-last-n-hours' => array(
              'help' => t("Get Courses"),
              'access arguments' => array('get all courses'),
              'access arguments append' => FALSE,
              'callback' => '_api_courses_get',
              'args' => array(
                array(
                  'name' => 'centre',
                  'optional' => FALSE,
                  'source' => array('path' => 1),
                  'type' => 'int',
                  'description' => 'CentreID',
                ),
                array(
                  'name' => 'lastupdated',
                  'optional' => FALSE,
                  'source' => array('path' => 2),
                  'type' => 'int',
                  'description' => 'Courses updated in last n hours',
                ),
              ),
        ),

        'teachers-updated-last-n-hours' => array(
              'help' => t("Get Teachers"),
              'access arguments' => array('get all courses'),
              'access arguments append' => FALSE,
              'callback' => '_api_teachers_get',
              'args' => array(
                array(
                  'name' => 'lastupdated',
                  'optional' => FALSE,
                  'source' => array('path' => 1),
                  'type' => 'int',
                  'description' => 'Teachers updated in last n hours',
                ),
              ),
        ),


        'post-application' => array(
              'help' => t("Post an application to course"),
              'access arguments' => array('post application'),
              'access arguments append' => FALSE,
              'callback' => '_api_post_application',
              'args' => array(
                array(
                  'name' => 'centre',
                  'optional' => FALSE,
                  'source' => array('path' => 1),
                  'type' => 'int',
                  'description' => 'Centre ID',
                ),
                array(
                  'name' => 'course',
                  'optional' => FALSE,
                  'source' => array('path' => 2),
                  'type' => 'int',
                  'description' => 'Course ID',
                ),
                array(
                  'name' => 'data',
                  'optional' => FALSE,
                  'source' => 'data',
                  'type' => 'string',
                  'description' => 'Base64 Encoded Query string key value pairs',
                ),
              ),
        ),


        'cmd' => array(
              'help' => t("POST an SMS Command"),
              'access arguments' => array('access sms api'),
              'access arguments append' => FALSE,
              'callback' => '_api_handle_sms',
              'args' => array(
                array(
                  'name' => 'params',
                  'optional' => FALSE,
                  'source' => 'data',
                  'type' => 'string',
                  'description' => 'Key value pairs',
                ),
              ),
          ),


        'apps-status' => array(
              'help' => t("Get status of applications"),
              'access arguments' => array('access voice api'),
              'access arguments append' => FALSE,
              'callback' => '_api_get_apps_status',
              'args' => array(
                array(
                  'name' => 'phone',
                  'optional' => FALSE,
                  'source' => array('path' => 1),
                  'type' => 'string',
                  'description' => 'Phone Number',
                ),
                array(
                  'name' => 'country_code',
                  'optional' => TRUE,
                  'source' => array('path' => 2),
                  'type' => 'string',
                  'description' => 'Country Code',
                ),
              ),
          ),


        'confirm-app' => array(
              'help' => t("Confirm attendance of application"),
              'access arguments' => array('access voice api'),
              'access arguments append' => FALSE,
              'callback' => '_api_confirm_app',
              'args' => array(
                array(
                  'name' => 'phone',
                  'optional' => FALSE,
                  'source' => array('path' => 1),
                  'type' => 'string',
                  'description' => 'Phone Number',
                ),
                array(
                  'name' => 'appid',
                  'optional' => FALSE,
                  'source' => array('path' => 2),
                  'type' => 'string',
                  'description' => 'Application ID',
                ),
              ),
          ),

        'cancel-app' => array(
              'help' => t("Cancel application"),
              'access arguments' => array('access voice api'),
              'access arguments append' => FALSE,
              'callback' => '_api_cancel_app',
              'args' => array(
                array(
                  'name' => 'phone',
                  'optional' => FALSE,
                  'source' => array('path' => 1),
                  'type' => 'string',
                  'description' => 'Phone Number',
                ),
                array(
                  'name' => 'appid',
                  'optional' => FALSE,
                  'source' => array('path' => 2),
                  'type' => 'string',
                  'description' => 'Application ID',
                ),
              ),
          ),


        'transfer-app' => array(
              'help' => t("Transfer application to another centre"),
              'access arguments' => array('access voice api'),
              'access arguments append' => FALSE,
              'callback' => '_api_transfer_app',
              'args' => array(
                array(
                  'name' => 'phone',
                  'optional' => FALSE,
                  'source' => array('path' => 1),
                  'type' => 'string',
                  'description' => 'Phone Number',
                ),
                array(
                  'name' => 'appid',
                  'optional' => FALSE,
                  'source' => array('path' => 2),
                  'type' => 'string',
                  'description' => 'Application ID',
                ),
              ),
          ),


          'countries-updated-last-n-hours' => array(
                  'help' => t("Get Countries"),
                  'access arguments' => array('get all centres'),
              'access arguments append' => FALSE,
                  'callback' => '_api_countries_get',
            'args' => array(
              array(
                'name' => 'lastupdated',
                'optional' => FALSE,
                'source' => array('path' => 1),
                'type' => 'int',
                'description' => 'Countries updated in last n hours',
              ),
            ),
          ),

          'states-updated-last-n-hours' => array(
                  'help' => t("Get States"),
                  'access arguments' => array('get all centres'),
              'access arguments append' => FALSE,
                  'callback' => '_api_states_get',
            'args' => array(
              array(
                'name' => 'lastupdated',
                'optional' => FALSE,
                'source' => array('path' => 1),
                'type' => 'int',
                'description' => 'States updated in last n hours',
              ),
            ),
          ),

          'cities-updated-last-n-hours' => array(
                  'help' => t("Get Cities"),
                  'access arguments' => array('get all centres'),
              'access arguments append' => FALSE,
                  'callback' => '_api_cities_get',
            'args' => array(
              array(
                'name' => 'lastupdated',
                'optional' => FALSE,
                'source' => array('path' => 1),
                'type' => 'int',
                'description' => 'Cities updated in last n hours',
              ),
            ),
          ),

          'app-status' => array(
                  'help' => t("Get Application ID status"),
                  'access arguments' => array('get application status'),
              'access arguments append' => FALSE,
                  'callback' => '_api_application_status',
            'args' => array(
              array(
                'name' => 'appid',
                'optional' => FALSE,
                'source' => array('path' => 1),
                'type' => 'int',
                'description' => 'Application ID',
              ),
            ),
          ),


        'transfer-application' => array(
              'help' => t("Transfer application to another centre"),
              'access arguments' => array('post application'),
              'access arguments append' => FALSE,
              'callback' => '_api_transfer_application',
              'args' => array(
                array(
                  'name' => 'data',
                  'optional' => FALSE,
                  'source' => 'data',
                  'type' => 'string',
                  'description' => 'Phone Number with country code',
                ),
              ),
          ),


        'get-current-apps-for-at' => array(
              'help' => t("Get current applications for AT code"),
              'access arguments' => array('at portal access'),
              'access arguments append' => FALSE,
              'callback' => '_get_current_apps_for_at',
              'args' => array(
                array(
                  'name' => 'at_code',
                  'optional' => FALSE,
                  'source' => array('path' => 1),
                  'type' => 'string',
                  'description' => 'AT code',
                ),
                array(
                  'name' => 'gender',
                  'optional' => FALSE,
                  'source' => array('path' => 2),
                  'type' => 'string',
                  'description' => 'AT Gender',
                ),
              ),
          ),


        'get-completed-apps-for-at' => array(
              'help' => t("Get Completed applications for AT code"),
              'access arguments' => array('at portal access'),
              'access arguments append' => FALSE,
              'callback' => '_get_completed_apps_for_at',
              'args' => array(
                array(
                  'name' => 'at_code',
                  'optional' => FALSE,
                  'source' => array('path' => 1),
                  'type' => 'string',
                  'description' => 'AT code',
                ),
                array(
                  'name' => 'gender',
                  'optional' => FALSE,
                  'source' => array('path' => 2),
                  'type' => 'string',
                  'description' => 'AT Gender',
                ),
              ),
          ),


        'get-app-detail' => array(
              'help' => t("Get Application Detail"),
              'access arguments' => array('at portal access'),
              'access arguments append' => FALSE,
              'callback' => '_get_app_detail',
              'args' => array(
                array(
                  'name' => 'appid',
                  'optional' => FALSE,
                  'source' => array('path' => 1),
                  'type' => 'int',
                  'description' => 'Application ID',
                ),
              ),
          ),


        'process-lc-application' => array(
              'help' => t("Process LC Application"),
              'access arguments' => array('at portal access'),
              'access arguments append' => FALSE,
              'callback' => '_process_lc_application',
              'args' => array(
                array(
                  'name' => 'appid',
                  'optional' => FALSE,
                  'source' => array('path' => 1),
                  'type' => 'int',
                  'description' => 'Application ID',
                ),
                array(
                  'name' => 'at_code',
                  'optional' => FALSE,
                  'source' => 'data',
                  'type' => 'string',
                  'description' => 'AT Code',
                ),
                array(
                  'name' => 'gender',
                  'optional' => FALSE,
                  'source' => 'data',
                  'type' => 'String',
                  'description' => 'AT Gender',
                ),
                array(
                  'name' => 'status',
                  'optional' => FALSE,
                  'source' => 'data',
                  'type' => 'string',
                  'description' => 'Application status',
                ),
                array(
                  'name' => 'comment',
                  'optional' => FALSE,
                  'source' => 'data',
                  'type' => 'string',
                  'description' => 'Comments if any',
                ),
                array(
                  'name' => 'teacher',
                  'optional' => FALSE,
                  'source' => 'data',
                  'type' => 'string',
                  'description' => 'Selected Teacher',
                ),
              ),
          ),


          'app-info-by-conf-num' => array(
                  'help' => t("Get Application Info by Confirmation Number"),
                  'access arguments' => array('zero day by conf num access'),
              'access arguments append' => FALSE,
                  'callback' => '_app_info_by_conf_num',
            'args' => array(
              array(
                'name' => 'conf_num',
                'optional' => FALSE,
                'source' => array('path' => 1),
                'type' => 'string',
                'description' => 'Confirmation Number',
              ),
            ),
          ),


          'mark-attended-by-conf-num' => array(
                  'help' => t("Mark Applicant as Attended by Confirmation Number"),
                  'access arguments' => array('zero day by conf num access'),
              'access arguments append' => FALSE,
                  'callback' => '_mark_attended_by_conf_num',
            'args' => array(
              array(
                'name' => 'conf_num',
                'optional' => FALSE,
                'source' => array('path' => 1),
                'type' => 'string',
                'description' => 'Confirmation Number',
              ),
            ),
          ),



        ),
     )
  );

  return $resources;
}


function _api_centres_get( $lastupdated )
{
    if (!$lastupdated)
      return array('Error' => 'Invalid hours');

    $last = date("YmdHi", strtotime("-$lastupdated hours"));
    $q = "select c.c_id as 'CentreID', c.c_name as 'CentreName', c.c_trust as 'TrustName', ci.c_name as 'City', s.s_name as 'State', co.c_name as 'Country', 
      c.c_address as 'Address', c.c_pincode as 'Pincode', c.c_phone as 'Phone', c.c_email as 'Email', c.c_url as 'URL', c.c_announcement as 'Announcement', c.c_subdomain as 'Identifier',
       co.c_code as 'CountryISO', s.s_code as 'StateISO', ci.c_id  as 'CityID', c.c_vri as 'VRIOnly' from dh_center c 
      left join dh_country co on (c.c_country=co.c_code) 
      left join dh_state s on (c.c_country=s.s_country and c.c_state=s.s_code) 
      left join dh_city ci on (c.c_city = ci.c_id) where date_format(c_updated, '%Y%m%d%H%i') > $last order by c.c_name";
    $res = db_query($q);
    $rows = array( 'Last Updated' => $last);
    while( $row = $res->fetchAssoc() )
      $rows[] = $row;

    return $rows;
}




function _api_courses_get( $centre, $lastupdated )
{
    if (!$lastupdated)
      return array('Error' => 'Invalid hours');

    if (!$centre)
      return array('Error' => 'Invalid Centre');

    $last = date("YmdHi", strtotime("-$lastupdated hours"));
    $today = date('Ymd');
    $q = "select co.c_id as 'CourseID', c.c_name as 'CentreName', c.c_id as 'CentreID', td.td_val1 as 'CourseType', co.c_start as 'StartDate', co.c_end as 'EndDate',
    co.c_enrol_date as 'EnrollmentDate', co.c_status_om as 'StatusOldMale', co.c_status_of as 'StatusOldFemale', 
    co.c_status_nm as 'StatusNewMale', co.c_status_nf as 'StatusNewFemale', co.c_status_svr_m as 'StatusServerMale', co.c_status_svr_f as 'StatusServerFemale',    
    co.c_list_only as 'ListOnly', c_comments as 'Comments', c_description as 'Description', c_status as 'CourseStatus', c_deleted as 'Deleted', c_cancelled as 'Cancelled', c_date_change as 'DateChange'  
    from dh_course co left join dh_center c on co.c_center=c.c_id  
    left join dh_type_detail td on (co.c_course_type=td.td_id) 
    where co.c_center=$centre and date_format(co.c_start, '%Y%m%d') > $today and (date_format(co.c_updated, '%Y%m%d%H%i') > $last or co.c_processed=0)  order by co.c_start";
    $res = db_query($q);
    $rows = array( 'Last Updated' => $last);
    while( $row = $res->fetchAssoc() )
      $rows[] = $row;

    return $rows;
}


function log_app( $data )
{
   file_put_contents("/var/log/vri-app.log", date("Y-m-d H:i:s")." ".$data."\n", FILE_APPEND);
}

function _api_post_application( $centre, $course, $data )
{
    log_app( "Centre: $centre, Course: $course, D: ".print_r($data, true) );
    if (!$centre)
      return array( "Result" => "Error", 'Message' => 'Invalid Centre');

    if (!$course)
      return array( "Result" => "Error", "Message" => 'Invalid Course');

    if (!$data)
      return array( "Result" => "Error", "Message" => 'Invalid Data');

    $course_data = db_query("select c_id,c_status_nf,c_status_nm,c_status_of,c_status_om,c_status_svr_f,c_status_svr_m, c_status from 
        dh_course where c_center=$centre and c_id=$course")->fetchAssoc();
    $row_ctype = db_query("select td_val3, td_val2 from dh_course c left join  dh_type_detail td on c.c_course_type=td.td_id where c_id=$course")->fetchAssoc();
    $course_type = $row_ctype['td_val3'];
    $total_days = $row_ctype['td_val2'];
    if ( isset($course_data) && ( $course_data['c_id'] <> $course) )
        return array("Result" => "Error", "Message" => "Course or Centre ID Invalid");

    $vals = array();
    parse_str($data['data'], $vals);
    if ( isset($vals['photo_data']) )
    {
       $vals['photo_data'] = str_replace(" ", "+", $vals['photo_data']);
    }
    $r = array();
    $oldstudent = 0;

    if (!isset($vals['type']) || ( !in_array($vals['type'], array('Student', 'Sevak')) )  )
      return array("Result" => "Error", "Message" => 'Applicant Type not present or not equal to Student or Sevak ' );

    if (!isset($vals['oldstudent']) || ( !in_array($vals['oldstudent'], array('0', '1')) )  )
      return array("Result" => "Error", "Message" => 'Old Student not present or not equal to 0 or 1' );

    if (($vals['type'] == 'Sevak') && ($vals['oldstudent'] == '0'))
    {
       return array("Result" => "Error", "Message" => 'Sevak must be an old student' );       
    }
    $oldstudent = $vals['oldstudent'];
    if ($vals['type'] == 'Sevak')
    {
      $check_field = 'c_status_svr_'.strtolower($vals['gender']);  
    }
    else
    {
       $check_field = 'c_status_'.($oldstudent?'o':'n').strtolower($vals['gender']);
    }
    
    if ( in_array( strtolower($course_data[$check_field]), array('full', 'course full', 'closed') ) || ( in_array( strtolower($course_data['c_status']), array('closed') ) ) )
        return array("Result" => "Error", "Message" => "Cannot accept applications as status is full/closed");

    if (!isset($vals['fname']) || (strlen($vals['fname']) > 50)  )
      return array("Result" => "Error", "Message" => 'First Name not present or more than 50 chars' );
    $r['a_f_name'] = $vals['fname'];

    if (!isset($vals['lname']) || (strlen($vals['lname']) > 50) )
      return array("Result" => "Error", "Message" => 'Last Name not present or more than 50 chars');
    $r['a_l_name'] = $vals['lname'];

    if (isset($vals['mname']) && (strlen($vals['mname']) > 50) )
      return array("Result" => "Error", "Message" => 'Middle Name more than 50 chars');
    
    if (!isset($vals['mname']))
      $r['a_m_name'] = '';
    else
      $r['a_m_name'] = $vals['mname'];  

    if (!isset($vals['gender']) || (!in_array($vals['gender'], array("M", "F")) ) )
      return array("Result" => "Error", "Message" => 'Gender not present or not "M"/"F" ');
    $r['a_gender'] = $vals['gender'];

    if (!isset($vals['age']) && ( !isset($vals['dob']) ) )
      return array("Result" => "Error", "Message" => 'Age/DOB not present');

    if (isset($vals['age']) && (($vals['age'] < 8) || ($vals['age'] > 95)) )
      return array("Result" => "Error", "Message" => "Age incorrect");
    else
      $r['a_dob'] = date("Y", strtotime("-".$vals['age']." year"))."-01-01";

    if (isset($vals['dob']) && (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$vals['dob'])) )
      return array("Result" => "Error", "Message" => "DOB not in yyyy-mm-dd format");
    else
      $r['a_dob'] = $vals['dob'];

    //if (!isset($vals['mobile']) || (!preg_match("/^[0-9]{10}$/", $vals['mobile']) ) )
    $is_value = false;
    $phone_type = -1;
    $mobile_format = \libphonenumber\PhoneNumberUtil::getInstance();
    $country_code = '';
    try {
      $m_phone = $mobile_format->parse("+".$vals['mobile'], null, null, true);
      $is_valid = $mobile_format->isValidNumber($m_phone);
      $phone_type = $mobile_format->getNumberType($m_phone); 
      $country_code = $m_phone->getCountryCode();
      $r['a_mob_country'] = $country_code;
      $vals['mobile'] = substr($vals['mobile'], strlen((string)$country_code));
      /*
      if ($country_code == '91')
      {
         $vals['mobile'] = substr($vals['mobile'], -10);
      }*/
    } catch (Exception $e) {
      
    }
    
    if (!isset($vals['mobile']) || ( !$is_valid  ) || ( ! in_array($phone_type, array(1,2)) ) ) 
      return array("Result" => "Error", "Message" => 'Mobile not present or not a valid mobile '.$is_valid.' '.$phone_type.' '.$country_code);
    $r['a_phone_mobile'] = $vals['mobile'];

    if (isset($vals['phone_home']) && ( strlen($vals['phone_home']) > 20 )  )
      return array("Result" => "Error", "Message" => 'Phone Home more than 20 chars');
    $r['a_phone_home'] = $vals['phone_home'];

    if (isset($vals['phone_office']) && ( strlen($vals['phone_office']) > 20 )  )
      return array("Result" => "Error", "Message" => 'Phone Office more than 20 chars');
    $r['a_phone_office'] = $vals['phone_office'];

    if (isset($vals['phone_fax']) && ( strlen($vals['phone_fax']) > 20 )  )
      return array("Result" => "Error", "Message" => 'Fax more than 20 chars');
    $r['a_phone_fax'] = $vals['phone_fax'];

    if (isset($vals['department']) && ( strlen($vals['department']) > 50 )  )
      return array("Result" => "Error", "Message" => 'Department more than 50 chars');
    $r['a_department'] = $vals['department'];

    if (!isset($vals['email']) || ( !filter_var($vals['email'], FILTER_VALIDATE_EMAIL) ) )
      return array("Result" => "Error", "Message" => 'Email not present or not a valid email');
    $r['a_email'] = $vals['email'];

    if (!isset($vals['zip']) )
      return array("Result" => "Error", "Message" => 'Zipcode not present');
    $r['a_zip'] = $vals['zip'];

    if (!isset($vals['country']) || (strlen($vals['country']) > 2 ) )  
      return array("Result" => "Error", "Message" => 'Country not present or not ISO code');
    $r['a_country'] = $vals['country'];

    if (!isset($vals['state']) || (strlen($vals['state']) > 2) )  
      return array("Result" => "Error", "Message" => 'State not present or not ISO code');
    $r['a_state'] = $vals['state'];

    if (!isset($vals['city']) || (strlen($vals['city']) > 100) )  
      return array("Result" => "Error", "Message" => 'City not present or more than 100 chars');
    $r['a_city'] = $vals['city'];

    if (!isset($vals['address']) || ( strlen($vals['address']) > 130 ) )
      return array("Result" => "Error", "Message" => 'Address not present or more than 160 chars');
    $r['a_address'] = $vals['address'];

    if (!isset($vals['education']) || ( strlen($vals['education']) > 25 ) )
      return array("Result" => "Error", "Message" => 'Education not present or more than 25 chars');
    $r['a_education'] = $vals['education'];

    if (!isset($vals['occupation']) || ( strlen($vals['occupation']) > 50 ) )
      return array("Result" => "Error", "Message" => 'Occupation not present or more than 50 chars');
    $r['a_occupation'] = $vals['occupation'];

    if (!isset($vals['designation']) || ( strlen($vals['designation']) > 50 ) )
      return array("Result" => "Error", "Message" => 'Designation not present or more than 50 chars');
    $r['a_designation'] = $vals['designation'];

    if (!isset($vals['company']) || ( strlen($vals['company']) > 50 ) )
      return array("Result" => "Error", "Message" => 'Company not present or more than 50 chars');
    $r['a_company'] = $vals['company'];



    $r['ac_10d'] = $r['ac_stp'] = $r['ac_20d'] = $r['ac_30d'] = $r['ac_45d'] = $r['ac_60d'] = $r['ac_spl'] = $r['ac_tsc'] = $r['ac_service'] = 0;
    if ($oldstudent)
    {
      if (isset($vals['10d'])  && ((!is_numeric($vals['10d'])) || ($vals['10d'] <= 0)) )
          return array("Result" => "Error", "Message" => "10day courses must be greater than 0");
      if (isset($vals['10d'])) $r['ac_10d'] = $vals['10d'];

      if (isset($vals['stp'])  && (!is_numeric($vals['stp']) ) )
          return array("Result" => "Error", "Message" => "STP courses must be numeric");
      if (isset($vals['stp'])) $r['ac_stp'] = $vals['stp'];

      if (isset($vals['10d_spl'])  && (!is_numeric($vals['10d_spl']) ) )
          return array("Result" => "Error", "Message" => "10D Spl courses must be numeric");
      if (isset($vals['10d_spl'])) $r['ac_spl'] = $vals['10d_spl'];

      if (isset($vals['20d'])  && (!is_numeric($vals['20d']) ) )
          return array("Result" => "Error", "Message" => "20 Day courses must be numeric");
      if (isset($vals['20d'])) $r['ac_20d'] = $vals['20d'];

      if (isset($vals['30d'])  && (!is_numeric($vals['30d']) ) )
          return array("Result" => "Error", "Message" => "30 Day courses must be numeric");
      if (isset($vals['30d'])) $r['ac_30d'] = $vals['30d'];

      if (isset($vals['45d'])  && (!is_numeric($vals['45d']) ) )
          return array("Result" => "Error", "Message" => "45 Day courses must be numeric");
      if (isset($vals['45d'])) $r['ac_45d'] = $vals['45d'];

      if (isset($vals['60d'])  && (!is_numeric($vals['60d']) ) )
          return array("Result" => "Error", "Message" => "60 Day courses must be numeric");
      if (isset($vals['60d'])) $r['ac_60d'] = $vals['60d'];

      if (isset($vals['tsc'])  && (!is_numeric($vals['tsc']) ) )
          return array("Result" => "Error", "Message" => "TSC courses must be numeric");
      if (isset($vals['tsc'])) $r['ac_tsc'] = $vals['tsc'];

      if (isset($vals['service'])  && (!is_numeric($vals['service']) ) )
          return array("Result" => "Error", "Message" => "Service Courses must be numeric");
      if (isset($vals['service'])) $r['ac_service'] = $vals['service'];

      if (!isset($vals['first_course_location']) || ( strlen($vals['first_course_location']) > 100 ) )
        return array("Result" => "Error", "Message" => 'First Course Location not present or more than 100 chars');
      $r['ac_first_location_str'] = $vals['first_course_location'];

      if (!isset($vals['first_course_teacher']) || ( strlen($vals['first_course_teacher']) > 100 ) )
        return array("Result" => "Error", "Message" => 'First Course teacher not present or more than 100 chars');
      $r['ac_first_teacher_str'] = $vals['first_course_teacher'];

      if (!isset($vals['last_course_location']) || ( strlen($vals['last_course_location']) > 100 ) )
        return array("Result" => "Error", "Message" => 'Last Course Location not present or more than 100 chars');
      $r['ac_last_location_str'] = $vals['last_course_location'];

      if (!isset($vals['last_course_teacher']) || ( strlen($vals['last_course_teacher']) > 100 ) )
        return array("Result" => "Error", "Message" => 'Last Course teacher not present or more than 100 chars');
      $r['ac_last_teacher_str'] = $vals['last_course_teacher'];


      if (!isset($vals['first_course_year']) || ( !is_numeric($vals['first_course_year']) ) )
        return array("Result" => "Error", "Message" => 'First Course Year not present or not numeric');
      if (isset($vals['first_course_year'])) $r['ac_first_year'] = $vals['first_course_year'];

      if (isset($vals['first_course_month']) && ( !is_numeric($vals['first_course_month']) ) )
        return array("Result" => "Error", "Message" => 'First Course Month not present or not numeric');
      if (isset($vals['first_course_month'])) $r['ac_first_month'] = $vals['first_course_month'];

      if (isset($vals['first_course_day']) && ( !is_numeric($vals['first_course_day']) ) )
        return array("Result" => "Error", "Message" => 'First Course Day not numeric');
      if (isset($vals['first_course_day'])) $r['ac_first_day'] = $vals['first_course_day'];

      if (!isset($vals['last_course_year']) || ( !is_numeric($vals['last_course_year']) ) )
        return array("Result" => "Error", "Message" => 'Last Course Year not present or not numeric');
      if (isset($vals['last_course_year'])) $r['ac_last_year'] = $vals['last_course_year'];

      if (isset($vals['last_course_month']) && ( !is_numeric($vals['last_course_month']) ) )
        return array("Result" => "Error", "Message" => 'Last Course Month not present or not numeric');
      if (isset($vals['last_course_month'])) $r['ac_last_month'] = $vals['last_course_month'];

      if (isset($vals['last_course_day']) && ( !is_numeric($vals['last_course_day']) ) )
        return array("Result" => "Error", "Message" => 'Last Course Day not numeric');
      if (isset($vals['last_course_day'])) $r['ac_last_day'] = $vals['last_course_day'];

      if (!isset($vals['practice_details']) || ( strlen($vals['practice_details']) > 100 ) )
        return array("Result" => "Error", "Message" => 'Practice Details not present or more than 100 chars');
      if (trim($vals['practice_details']) <> '')
      {
          $r['ac_practice'] = 1;
          $r['ac_practice_details'] = $vals['practice_details'];
      }
      else
          $r['ac_practice'] = 0;

    }


    if (!isset($vals['lang1']) || ( strlen($vals['lang1']) > 50 ) )
      return array("Result" => "Error", "Message" => 'Lang1 not present or more than 50 chars');
    $r['a_lang_1'] = $vals['lang1'];

    if (!isset($vals['lang1_level']) || ( strlen($vals['lang1_level']) > 15 ) )
      return array("Result" => "Error", "Message" => 'Lang1 Level not present or more than 15 chars');
    $r['a_lang_1_level'] = $vals['lang1_level'];

    if (!isset($vals['lang2']) || ( strlen($vals['lang2']) > 50 ) )
      return array("Result" => "Error", "Message" => 'Lang2 not present or more than 50 chars');
    $r['a_lang_2'] = $vals['lang2'];

    if (!isset($vals['lang2_level']) || ( strlen($vals['lang2_level']) > 15 ) )
      return array("Result" => "Error", "Message" => 'Lang2 Level not present or more than 15 chars');
    $r['a_lang_2_level'] = $vals['lang2_level'];


    if (isset($vals['seva_details']) && ( strlen($vals['seva_details']) > 300 ) )
      return array("Result" => "Error", "Message" => 'Seva Detais not present or more than 300 chars');
    if (trim($vals['seva_details']) <> '')
        $r['ae_seva_details'] = $vals['seva_details'];


    if (!isset($vals['mental']))
      return array("Result" => "Error", "Message" => 'Mental not present');
    if (trim($vals['mental']) <> '')
    {
        $r['a_problem_mental'] = 1;
        $r['ae_desc_mental'] = $vals['mental'];
    }
    else
        $r['a_problem_mental'] = 0;

    if (!isset($vals['physical']))
      return array("Result" => "Error", "Message" => 'Physical not present');
    if (trim($vals['physical']) <> '')
    {
        $r['a_problem_physical'] = 1;
        $r['ae_desc_physical'] = $vals['physical'];
    }
    else
        $r['a_problem_physical'] = 0;

    if (!isset($vals['medication']))
      return array("Result" => "Error", "Message" => 'Medication not present');
    if (trim($vals['medication']) <> '')
    {
        $r['a_medication'] = 1;
        $r['ae_desc_medication'] = $vals['medication'];
    }
    else
        $r['a_medication'] = 0;

    if (!isset($vals['intox']))
      return array("Result" => "Error", "Message" => 'Intox not present');
    if (trim($vals['intox']) <> '')
    {
        $r['a_addiction_current'] = 1;
        $r['ae_desc_addiction_current'] = $vals['intox'];
    }
    else
        $r['a_addiction_current'] = 0;

    if (!isset($vals['othermeditaion']))
      return array("Result" => "Error", "Message" => 'Othermeditation not present');
    if (trim($vals['othermeditaion']) <> '')
    {
        $r['a_other_technique'] = 1;
        $r['ae_desc_other_technique'] = $vals['othermeditaion'];
    }
    else
        $r['a_other_technique'] = 0;


    if (!isset($vals['othermeditaion_old']))
      return array("Result" => "Error", "Message" => 'Othermeditation Old Students not present');
    if (trim($vals['othermeditaion_old']) <> '')
    {
        $r['a_other_technique_old'] = 1;
        $r['ae_desc_other_technique_old'] = $vals['othermeditaion_old'];
    }
    else
        $r['a_other_technique_old'] = 0;


    if (!isset($vals['teach_other_details']))
      return array("Result" => "Error", "Message" => 'Teach other details not present');
    if (trim($vals['teach_other_details']) <> '')
    {
        $r['a_teach_others'] = 1;
        $r['ae_teach_other_details'] = $vals['teach_other_details'];
    }
    else
        $r['a_teach_others'] = 0;



    if (isset($vals['photo_name']) && ($vals['photo_name'] <> '') )
    {
       if (!isset($vals['photo_data']) || ($vals['photo_data'] == ''))
         return array("Result" => "Error", "Message" => 'Photo Data not found');
       //if (strstr( trim($vals['photo_data']), " " ))
       //   return array("Result" => "Error", "Message" => 'Photo Data is not base64 encoded');
    }

    if (!isset($vals['emergency_name']) || ( strlen($vals['emergency_name']) > 50 ) )
      return array("Result" => "Error", "Message" => 'Emergency Name not present or more than 50 chars');
    $r['a_emergency_name'] = $vals['emergency_name'];

    if (!isset($vals['emergency_relation']) || ( strlen($vals['emergency_relation']) > 50 ) )
      return array("Result" => "Error", "Message" => 'Emergency Relation not present or more than 50 chars');
    $r['a_emergency_relation'] = $vals['emergency_relation'];

    if (!isset($vals['emergency_num']) || ( strlen($vals['emergency_num']) > 40 ) )
      return array("Result" => "Error", "Message" => 'Emergency Number not present or more than 40 chars');
    $r['a_emergency_num'] = $vals['emergency_num'];

    if (trim($vals['passport']) <> '')
    {
      if (strlen($vals['passport']) > 20 )
         return array("Result" => "Error", "Message" => 'Passport more than 20 chars');
      $r['a_passport'] = $vals['passport'];
    }

    if (trim($vals['voter_id']) <> '')
    {
      if (strlen($vals['voter_id']) > 20 )
         return array("Result" => "Error", "Message" => 'Voter ID more than 20 chars');
      $r['a_voter_id'] = $vals['voter_id'];
    }

    if (trim($vals['pancard']) <> '')
    {
      if (strlen($vals['pancard']) > 20 )
         return array("Result" => "Error", "Message" => 'Pancard more than 20 chars');
      $r['a_pancard'] = $vals['pancard'];
    }

    if (trim($vals['aadhar']) <> '')
    {
      if (strlen($vals['aadhar']) > 20 )
         return array("Result" => "Error", "Message" => 'Aadhar more than 20 chars');
      $r['a_aadhar'] = $vals['aadhar'];
    }

    if (trim($vals['learn_about_vip']) <> '')
    {
      if (strlen($vals['learn_about_vip']) > 255 )
         return array("Result" => "Error", "Message" => 'Learn about vipassana more than 255 chars');
      $r['a_learn_about_vip'] = $vals['learn_about_vip'];
    }

    if (trim($vals['friend_family_details']) <> '')
    {
      if (strlen($vals['a_friend_family_details']) > 100 )
         return array("Result" => "Error", "Message" => 'Friend Family Details more than 100 chars');
      $r['a_friend_family_details'] = $vals['friend_family_details'];
      $r['a_friend_family'] = 1;
    }
    else
      $r['a_friend_family'] = 0;

    if (trim($vals['extra']) <> '')
    {
      if (strlen($vals['extra']) > 600 )
         return array("Result" => "Error", "Message" => 'Extra information more than 600 chars');
      $r['a_extra'] = $vals['extra'];
    }

    /*Long course checks*/
    if ($course_type == 'LC')
    {
        if (!isset($vals['lc_committed']) || ( ! in_array($vals['lc_committed'], array('0', '1')) ) )
          return array("Result" => "Error", "Message" => 'Committed not present or invalid value');
        $r['al_committed'] = $vals['lc_committed'];

        if (!isset($vals['lc_2yrs']) || ( ! in_array($vals['lc_2yrs'], array('0', '1')) ) )
          return array("Result" => "Error", "Message" => 'Practice exclusively for 2 years not present or invalid value');
        $r['al_exclusive_2yrs'] = $vals['lc_2yrs'];

        if (!isset($vals['lc_daily_practice_yrs']) || ( ! is_numeric($vals['lc_daily_practice_yrs']) ) )
          return array("Result" => "Error", "Message" => 'Daily Practice years not present or invalid value');
        $r['al_daily_practice_yrs'] = $vals['lc_daily_practice_yrs'];    

        if (!isset($vals['lc_practice_details']) || ( trim($vals['lc_practice_details']) == ''  ) )
          return array("Result" => "Error", "Message" => 'Practice Details not present');
        $r['al_daily_practice_details'] = $vals['lc_practice_details'];    

        if (!isset($vals['lc_precepts']) || ( ! in_array($vals['lc_precepts'], array('0','1'))  ) )
          return array("Result" => "Error", "Message" => '5 Precepts not present');
        $r['al_5_precepts'] = $vals['lc_precepts'];    

        if (!isset($vals['lc_intoxicants']) || ( ! in_array($vals['lc_intoxicants'], array('0','1'))  ) )
          return array("Result" => "Error", "Message" => 'Intoxicants not present');
        $r['al_intoxicants'] = $vals['lc_intoxicants'];    

        if (!isset($vals['lc_sexual_misconduct']) || ( ! in_array($vals['lc_sexual_misconduct'], array('0','1'))  ) )
          return array("Result" => "Error", "Message" => 'Sexual Misconduct not present');
        $r['al_sexual_misconduct'] = $vals['lc_sexual_misconduct'];    

        if (!isset($vals['lc_recent_sat_type']) || ( trim($vals['lc_recent_sat_type']) == ''  ) )
          return array("Result" => "Error", "Message" => 'Most Recent Course Sat not present');
        $r['al_recent_sat_type'] = $vals['lc_recent_sat_type'];    

        if ( ($total_days >= 30 ) && (!isset($vals['lc_last_lc_type']) || ( trim($vals['lc_last_lc_type']) == ''  ) ))
          return array("Result" => "Error", "Message" => 'Last Long Course Type Sat not present');
        $r['al_last_lc_type'] = $vals['lc_last_lc_type'];    
                
        if ( ($total_days >= 30 ) && (!isset($vals['lc_last_lc_date']) || ( trim($vals['lc_last_lc_date']) == ''  ) ))
          return array("Result" => "Error", "Message" => 'Last Long Course Sat Date not present');
        $r['al_last_lc_date'] = $vals['lc_last_lc_date'];    

        if ( ($total_days >= 30 ) &&  (!isset($vals['lc_last_lc_location']) || ( trim($vals['lc_last_lc_location']) == ''  ) ))
          return array("Result" => "Error", "Message" => 'Last Long Course Sat Location not present');
        $r['al_last_lc_location'] = $vals['lc_last_lc_location'];    
                
        if ( ($total_days >= 30 ) && (!isset($vals['lc_last_lc_teacher']) || ( trim($vals['lc_last_lc_teacher']) == ''  ) ))
          return array("Result" => "Error", "Message" => 'Last Long Course Sat Teacher not present');
        $r['al_last_lc_teacher'] = $vals['lc_last_lc_teacher'];    

        if (!isset($vals['lc_relationship']) || ( ! in_array($vals['lc_relationship'], array('0','1'))  ) )
          return array("Result" => "Error", "Message" => 'Relationship not present');
        $r['al_relationship'] = $vals['lc_relationship'];    

        if ($vals['lc_relationship'])
        {
            if (!isset($vals['lc_relation_harmonious']) || ( ! in_array($vals['lc_relation_harmonious'], array('0','1'))  ) )
              return array("Result" => "Error", "Message" => 'Relationship harmonious not present');
            $r['al_relation_harmonious'] = $vals['lc_relation_harmonious'];    

            if (!isset($vals['lc_relationship_lifelong']) || ( ! in_array($vals['lc_relationship_lifelong'], array('0','1'))  ) )
              return array("Result" => "Error", "Message" => 'Relationship LifeLong not present');
            $r['al_relationship_lifelong'] = $vals['lc_relationship_lifelong'];    

            if (!isset($vals['lc_spouse_name']) || ( trim($vals['lc_spouse_name']) == ''  ) )
              return array("Result" => "Error", "Message" => 'Spouse Name not present');
            $r['al_spouse_name'] = $vals['lc_spouse_name'];    

            if (!isset($vals['lc_spouse_approve']) || ( ! in_array($vals['lc_spouse_approve'], array('0','1'))  ) )
              return array("Result" => "Error", "Message" => 'Spouse Approve not present');
            $r['al_spouse_approve'] = $vals['lc_spouse_approve'];    

            if (!isset($vals['lc_spouse_meditator']) || ( ! in_array($vals['lc_spouse_meditator'], array('0','1'))  ) )
              return array("Result" => "Error", "Message" => 'Spouse Meditator not present');
            $r['al_spouse_meditator'] = $vals['lc_spouse_meditator'];    

            if (!isset($vals['lc_spouse_other_technique']) || ( trim($vals['lc_spouse_other_technique']) == ''  ) )
              return array("Result" => "Error", "Message" => 'Spouse Other Technique not present');
            $r['al_spouse_other_technique'] = $vals['lc_spouse_other_technique'];            
        }
        if (!isset($vals['lc_left_course']) || ( ! in_array($vals['lc_left_course'], array('0','1'))  ) )
          return array("Result" => "Error", "Message" => 'Left Course not present');
        $r['al_left_course'] = $vals['lc_left_course'];    

        if ($vals['lc_left_course'])
        {
            if (!isset($vals['lc_left_course_details']) || ( trim($vals['lc_left_course_details']) == ''  ) )
              return array("Result" => "Error", "Message" => 'Left Course Details not present');
            $r['al_left_course_details'] = $vals['lc_left_course_details'];                        
        }

        if (!isset($vals['lc_reduce_practice']) || ( ! in_array($vals['lc_reduce_practice'], array('0','1'))  ) )
          return array("Result" => "Error", "Message" => 'Reduce Practice Advise not present');
        $r['al_reduce_practice'] = $vals['lc_reduce_practice'];    

        if ($vals['lc_reduce_practice'])
        {
            if (!isset($vals['lc_reduce_practice_details']) || ( trim($vals['lc_reduce_practice_details']) == ''  ) )
              return array("Result" => "Error", "Message" => 'Reduce Practice Advise Details not present');
            $r['al_reduce_practice_details'] = $vals['lc_reduce_practice_details'];                        
        }

        if (!isset($vals['lc_personal_tragedy']) || ( ! in_array($vals['lc_personal_tragedy'], array('0','1'))  ) )
          return array("Result" => "Error", "Message" => 'Personal Tragedy not present');
        $r['al_personal_tragedy'] = $vals['lc_personal_tragedy'];    

        if ($vals['lc_personal_tragedy'])
        {
            if (!isset($vals['lc_personal_tragedy_details']) || ( trim($vals['lc_personal_tragedy_details']) == ''  ) )
              return array("Result" => "Error", "Message" => 'Personal Tragedy Details not present');
            $r['al_personal_tragedy_details'] = $vals['lc_personal_tragedy_details'];                        
        }


        if (!isset($vals['lc_difficulty']) || ( ! in_array($vals['lc_difficulty'], array('0','1'))  ) )
          return array("Result" => "Error", "Message" => 'Difficulty not present');
        $r['al_difficulty'] = $vals['lc_difficulty'];    

        if ($vals['lc_difficulty'])
        {
            if (!isset($vals['lc_difficulty_details']) || ( trim($vals['lc_difficulty_details']) == ''  ) )
              return array("Result" => "Error", "Message" => 'Difficulty Details not present');
            $r['al_difficulty_details'] = $vals['lc_difficulty_details'];                        
        }


        if (!isset($vals['lc_special_req']) || ( ! in_array($vals['lc_special_req'], array('0','1'))  ) )
          return array("Result" => "Error", "Message" => 'Special Request not present');
        $r['al_special_req'] = $vals['lc_difficulty'];    

        if ($vals['lc_special_req'])
        {
            if (!isset($vals['lc_special_req_details']) || ( trim($vals['lc_special_req_details']) == ''  ) )
              return array("Result" => "Error", "Message" => 'Special Request Details not present');
            $r['al_special_req_details'] = $vals['al_special_req_details'];                        
        }


        if (trim($vals['lc_additional_info']) <> '')
        {
          if (strlen($vals['lc_additional_info']) > 255 )
             return array("Result" => "Error", "Message" => 'Additonal info more than 255 chars');
          $r['al_additional_info'] = $vals['lc_additional_info'];
        }

        if (!isset($vals['lc_arrival']) || ( trim($vals['lc_arrival']) == '' ))
          return array("Result" => "Error", "Message" => 'Arrival not present');

        if (trim($vals['lc_arrival']) <> '')
        {
          if (strlen($vals['lc_arrival']) > 50 )
             return array("Result" => "Error", "Message" => 'Arrival more than 50 chars');
          $r['al_arrival'] = $vals['lc_arrival'];    
        }



        if (!isset($vals['lc_recommending']) || ( trim($vals['lc_recommending']) == '' ))
          return array("Result" => "Error", "Message" => 'Recommending AT not present');
        $r['al_recommending'] = $vals['lc_recommending'];


        if (isset($vals['lc_at_year']) && ( ! is_numeric($vals['lc_at_year']) ))
          return array("Result" => "Error", "Message" => 'AT Year not present');
        if (isset($vals['lc_at_year']))
            $r['al_at_year'] = $vals['lc_at_year'];

        if (isset($vals['lc_served_other']) && ( strlen($vals['lc_served_other']) > 255 ))
          return array("Result" => "Error", "Message" => 'Served Other Courses more than 255 chars');
        if (isset($vals['lc_served_other']))
            $r['al_served_other'] = $vals['lc_served_other'];

    }
    /*End of Long course checks*/

    $app['a_course'] = $course;
    $app['a_center'] = $centre;
    $app['a_old'] = $oldstudent; // Assuming old student, since first phase is only for seva
    $app['a_type'] = $vals['type'];
    $app['a_status'] =  ''; //'Received';
    $app['a_source'] = 'VRI-app';
    $system_uids = db_query("select td_key, td_val1 from dh_type_detail where td_type = 'COURSE-APPLICANT'")->fetchAllKeyed();    
    $app['a_center'] = $centre;
    $app['a_course'] = $course;
    $app['a_created_by'] = $system_uids['COURSE-APPLICANT-UID'];
    $app['a_created'] = date('Y-m-d H:i:s');
    $app['a_updated_by'] = $system_uids['COURSE-APPLICANT-UID'];
    $app['a_updated'] = date('Y-m-d H:i:s');
    $app['a_attended'] = 0;

    foreach ($r as $key => $value) 
    {
        if ( substr($key,0,2) == 'a_')
            $app[$key] = $value;
        if ( substr($key,0,3) == 'ac_')
            $app_ac[$key] = $value;
        if ( substr($key,0,3) == 'ae_')
            $app_ae[$key] = $value;
        if ( substr($key,0,3) == 'al_')
            $app_al[$key] = $value;
    }
    if ($app['a_city'] <> '')
    {   
        $q = "select c_id from dh_city where c_country='".$app['a_country']."' and c_state='".$app['a_state']."' and c_name='".$app['a_city']."' limit 1";
        $city_id = db_query($q)->fetchField();
        if ( $city_id <> '')
            $app['a_city'] = $city_id;
        else
        {
            $q = "select ci.c_id from dh_pin_code p left join dh_city ci on p.pc_city=ci.c_id left join 
                dh_state s on (ci.c_state=s.s_code and ci.c_country=s.s_country) left join dh_country co on ci.c_country=co.c_code where 
                pc_pin='".$app['a_zip']."' limit 0,1";
            $city = db_query($q)->fetchField();
            if ($city > 0)
                $app['a_city'] = $city;
            else
            {
                /* We just could not find the city, so lets just add it */
                $f['c_country'] = $app['a_country'];
                $f['c_state'] = $app['a_state'];
                $f['c_name'] = $app['a_city'];
                $city = db_insert('dh_city')->fields($f)->execute();
                $app['a_city'] = $city;
            }
        }
    }

    $app_id = db_insert('dh_applicant')->fields($app)->execute();
    dh_send_letter('applicant', $app_id, $app['a_status'] );
    if ( isset($app_ae) )
    {
        $app_ae['ae_applicant'] = $app_id;
        $app_ae['ae_updated_by'] = $app_ae['ae_created_by'] = $system_uids['COURSE-APPLICANT-UID'];
        $app_ae['ae_updated'] = $app_ae['ae_created'] = date('Y-m-d H:i:s');
        db_insert('dh_applicant_extra')->fields($app_ae)->execute();                
    }

    if (isset($app_ac))
    {
        $app_ac['ac_applicant'] = $app_id;
        $app_ac['ac_updated_by'] = $app_ac['ac_created_by'] = $system_uids['COURSE-APPLICANT-UID'];
        $app_ac['ac_updated'] = $app_ac['ac_created'] = date('Y-m-d H:i:s');        
        db_insert('dh_applicant_course')->fields($app_ac)->execute();               
    }

    if (isset($app_al))
    {
        $app_al['al_applicant'] = $app_id;
        db_insert('dh_applicant_lc')->fields($app_al)->execute();               
    }

    if (isset($vals['photo_name']) && ($vals['photo_name'] <> '') )
    {
      $temp = base64_decode($vals['photo_data']);
      $path = pathinfo($vals['photo_name']);
      $photo_dir = drupal_realpath('private://');
      $dir = $photo_dir."/photo-id/".$centre."/".$course;
      $fname = $dir."/app-".$app_id.".".$path['extension'];
      /*if (!is_dir($dir))
          mkdir($dir, 0755, true);
      file_put_contents($fname, $temp);
      */
        $file_local = tempnam("/var/dana", "photo-app-");
        file_put_contents($file_local, $temp);
      $ph = array();
      $ph['a_photo'] = "private://photo-id/$centre/$course/app-$app_id.".$path['extension'];
        $ret = s3_put_file(variable_get('s3_bucket_name', ''), $file_local, str_replace("private://", '', $ph['a_photo']));
        if (!$ret['success'])
            watchdog( 'S3Photo', $ret['messsage']);
      db_update('dh_applicant')->fields($ph)->condition('a_id', $app_id)->execute();
    }
    $old = getcwd();    
    $cmd = "/usr/bin/php status-trigger.php $app_id 'Received'";
    exec($cmd);
    $msg = "Application submitted successfully";
    return array("Result" => "Success", "Message" => $msg, 'ID' => $app_id );
}

function _api_sms_keywords()
{
    return array('HELP', 'STATUS', 'CANCEL', 'CONFIRM', 'TRANSFER' , 'ADDRESS',  'CONTACT', 'CENTRES', 'PATRIKA');
}

function _api_handle_sms($params)
{
    //watchdog("SMS", "I got data".print_r($params, true));
    $data = "From: ".$params['inNumber']." Sender: ".$params['sender'].", CMD: ".$params['keyword'];
    $result = ""; $response = '';
    $country = '91';
    $sender = $params['sender'];
    try {
      $mobile_format = \libphonenumber\PhoneNumberUtil::getInstance();
      $m_phone = $mobile_format->parse("+".$params['sender'], null, null, true);
      $country = $m_phone->getCountryCode();
      /*if ($country == '91')
        $sender = str_replace( array("+", $country), "", $params['sender']);
      */
      
    } catch (Exception $e) {
      log_app("SMS: ".$params['sender']." -> ".$e->getMessage());          
    }

    /*if ( substr($params['sender'], 0, 2) == '91')
      $sender =  substr($params['sender'], -10);
    else
    {
      $sender = $params['sender'];
      $country = substr($params['sender'], 0, 2);
    }*/
    $temp = explode(" ", $params['content']);
    $keyword = $temp[0];
    $content = trim(str_replace($keyword, "", $params['content']));

    $keywords = _api_sms_keywords();
    if (!in_array( strtoupper($keyword), $keywords ))
    {
        $response = "Unknown Keyword $keyword, try HELP";
        $result = send_sms($sender, $response, $country);
        _sms_log($sender, $keyword, $params['content'], $response);
        return array("Result" => "Bad Keyword $keyword"); //['status']
    }
    switch ( strtoupper($keyword) ) 
    {
      case 'HELP':
        $response = _api_sms_keyword_help();
        break;
      case 'ADDRESS':
        $response = _api_sms_keyword_address( $content ) ;
        break;      
      case 'CONTACT':
        $response = _api_sms_keyword_contact( $content ) ;
        break;              
      case 'CENTRES':
        $response = _api_sms_keyword_centres();
        break;      
      case 'STATUS':
        $response = _api_sms_keyword_status($sender);
        break;
      case 'CANCEL':
        $response = _api_sms_keyword_cancel($sender, $content);
        break;
      case 'CONFIRM':
        $response = _api_sms_keyword_confirm($sender, $content);
        break;
      case 'TRANSFER':
        if (count($temp) < 3)
        {
          $response = "TRANSFER <centre> <YYYY-mm-dd>\nPlease send in above format";
          $result = send_sms($sender, $response, $country);
          _sms_log($sender, $keyword, $params['content'], $response);
          return array("Result" => "Bad format ".$content); //['status']            
        }
        $centre = $temp[1];
        $start_date = $temp[2];
        if (!isset($temp[3]))
            $id = "";
        else
            $id = $temp[3];
        $response = _api_sms_keyword_transfer($sender,  $centre, $start_date, $id );
        break;
      case 'PATRIKA':
        if (count($temp) < 3)
        {
          $response = "PATRIKA <subscriber id> <pincode>\nPlease send in above format";
          $result = send_sms($sender, $response, $country);
          _sms_log($sender, $keyword, $params['content'], $response);
          return array("Result" => "Bad format ".$content); //['status']            
        }
        $pid = $temp[1];
        $pincode = $temp[2];
        $response = _api_sms_keyword_patrika($pid, $pincode);
        break;
      default:
        # code...
        break;
    }
  //  _sms_log($params['inNumber'], $params['keyword'], $params['content'], $response);
 
    _sms_log($sender, $keyword, $content, $response);
    $result = send_sms($sender, $response, $country);        

    return array("Result" => $result); //['status']
}


function _sms_log( $from, $keyword, $content, $response )
{
    $rec['sl_from'] = $from;
    $rec['sl_keyword'] = $keyword;
    $rec['sl_content'] = $content;
    $rec['sl_response'] = $response;
    db_insert('dh_sms_log')->fields($rec)->execute();
}

function _api_sms_keyword_help()
{
    $keywords = _api_sms_keywords();
    return "KEYWORDS:\n".implode("\n", $keywords);
}

function _api_sms_keyword_centres()
{
    $q = "select c_subdomain from dh_center order by c_subdomain";
    $res = db_query($q);
    $rows = array();
    while($r = $res->fetchAssoc())
        $rows[] = $r['c_subdomain'];
    return "List of Centers -\n".implode("\n", $rows);
}

function _api_sms_keyword_address($subdomain)
{
    $subdomain = addslashes($subdomain);
    $q = "select c.c_address, c.c_pincode,co.c_name as 'Country', s_name as 'State', ci.c_name as 'City' from dh_center c left join dh_country co on (c.c_country=co.c_code) 
      left join dh_state s on (c.c_country=s.s_country and c.c_state=s.s_code) left join dh_city ci on (c.c_city=ci.c_id) 
      where c_subdomain='$subdomain'";
    $res = db_query($q)->fetchAssoc();
    if ($res['c_address'] == '')
        return "Address <centre>. For list of centres, send CENTRES";

    return "Address:\n".$res['c_address']."-".$res['c_pincode']."\n".$res['City'].",".$res['State'].",".$res['Country'];
}

function _api_sms_keyword_contact($subdomain)
{
    $subdomain = addslashes($subdomain);
    $q = "select c.c_phone, c_email, c_url  from dh_center c where c_subdomain='$subdomain'";
    $res = db_query($q)->fetchAssoc();
    if ($res['c_phone'] == '')
        return "CONTACT <centre>. For list of centres, send CENTRES";

    return "Phone: ".$res['c_phone']."\nEmail: ".$res['c_email']."\nWeb: ".$res['c_url'];
}


function _api_sms_keyword_status($phone)
{
    $phone = addslashes($phone);
    $q = "select a_status, CONCAT(a_f_name, ' ', a_l_name) as 'name', a_conf_no, c_name  from dh_applicant 
      left join dh_course on (a_course=c_id) 
      where date_format(c_start, '%Y%m%d') >= ".date("Ymd")." and CONCAT(a_mob_country,a_phone_mobile)='$phone'";
    $res = db_query($q);

    $out = '';
    while($r = $res->fetchAssoc())
    {
        $out .= $r['c_name']."\n".$r['name']." - ".$r['a_status'];
        if ($r['a_conf_no'] <> '')
            $out .= " (".$r['a_conf_no'].")";
        $out .= "\n";
    }

    if ($out == '')
        return "No applications found for this phone number";

    return "Following application(s) found:"."\n".$out;
}


function _api_sms_keyword_cancel($phone, $id)
{
    $phone = addslashes($phone);
    $out = '';
    $count_q = "select count(a_id) from dh_applicant left join dh_course on (a_course=c_id) 
      where date_format(c_start, '%Y%m%d') >= ".date("Ymd")." and CONCAT(a_mob_country,a_phone_mobile)='$phone'";

    $q = "select a_id, a_status, CONCAT(a_f_name, ' ', a_l_name) as 'name', a_conf_no, c_name  from dh_applicant 
      left join dh_course on (a_course=c_id) 
      where date_format(c_start, '%Y%m%d') >= ".date("Ymd")." and CONCAT(a_mob_country,a_phone_mobile)='$phone'";

    if ($id <> '')
    {
        $id = addslashes($id);
        $q .= " and a_id='$id'";
        $count_q .= " and a_id='$id'";
    }
    $records = db_query($count_q)->fetchField();

    if ( $records == 0 )
        return "No applications found for this phone number";        
    elseif ($records > 1)
    {
        $res = db_query($q);
        while($r = $res->fetchAssoc())
        {
          $out .= "AppID: ".$r['a_id']."\n".$r['c_name']."\n".$r['name']." - ".$r['a_status'];
          if ($r['a_conf_no'] <> '')
              $out .= " (".$r['a_conf_no'].")";            
          $out .= "\n\n";
        }
        $out = "Multiple applications found for this phone number\n\n".$out."\nSend CANCEL AppID";
    }
    else
    {
        $res = db_query($q);
        $r = $res->fetchAssoc();

        $out = "Application Id ".$r['a_id']." for ".$r['c_name']." cancelled successfully";
        $cmd = "/usr/bin/php status-trigger.php ".$r['a_id']." 'Cancelled'";
        exec($cmd);

    }

    return $out;
}


function _api_sms_keyword_confirm($phone, $id)
{
    $phone = addslashes($phone);
    $count_q = "select count(a_id) from dh_applicant left join dh_course on (a_course=c_id) 
      where date_format(c_start, '%Y%m%d') >= ".date("Ymd")." and CONCAT(a_mob_country,a_phone_mobile)='$phone' and a_status IN ('PreConfirmation','ReConfirmation')";

    $q = "select a_id, a_status, CONCAT(a_f_name, ' ', a_l_name) as 'name', a_conf_no, c_name  from dh_applicant 
      left join dh_course on (a_course=c_id) 
      where date_format(c_start, '%Y%m%d') >= ".date("Ymd")." and CONCAT(a_mob_country,a_phone_mobile)='$phone' and a_status IN ('PreConfirmation','ReConfirmation')";

    if ($id <> '')
    {
        $id = addslashes($id);
        $q .= " and a_id='$id'";
        $count_q .= " and a_id='$id'";
    }
    $records = db_query($count_q)->fetchField();

    $out = '';

    if ( $records == 0 )
        return "No applications in PreConfirmation/ReConfirmation status found for this phone number";        
    elseif ($records > 1)
    {
        $res = db_query($q);
        while($r = $res->fetchAssoc())
        {
          $out .= "AppID: ".$r['a_id']."\n".$r['c_name']."\n".$r['name']." - ".$r['a_status'];
          if ($r['a_conf_no'] <> '')
              $out .= " (".$r['a_conf_no'].")"; 
          $out .= "\n\n";

        }
        $out = "Multiple applications found for this phone number\n\n".$out."\nSend CONFIRM AppID";
    }
    else
    {
        $res = db_query($q);
        $r = $res->fetchAssoc();
        if ($r['a_status'] == 'PreConfirmation')
        {
          $out = "Application Id ".$r['a_id']." for ".$r['c_name']." confirmed successfully";
          $cmd = "/usr/bin/php status-trigger.php ".$r['a_id']." 'Confirmed'";
        }
        else
        {
          $out = "Application Id ".$r['a_id']." for ".$r['c_name']." reconfirmed successfully";
          $cmd = "/usr/bin/php status-trigger.php ".$r['a_id']." 'Expected'";
        }
        exec($cmd);

    }

    return $out;
}


function _api_transfer_application( $data )
{
    if (!is_array($data))
    {
        $out = array('status' => 'error', 'msg' => 'No data found');
        return $out;
    }
    $fields = array('phone', 'centre', 'start_date', 'appid');
    foreach ($fields as $v) 
    {
        if ( ! in_array($v, array_keys($data)) )
        {
          $out = array('status' => 'error', 'msg' => "Field $v not present");
          return $out;
        }
    }
    if (!is_numeric($data['phone']))
    {
        $out = array('status' => 'error', 'msg' => "Phone must be numeric");
        return $out;
    }

    if (!is_numeric($data['appid']))
    {
        $out = array('status' => 'error', 'msg' => "Application ID must be numeric");
        return $out;
    }

    if (preg_match('/^(\d{4})-(\d{2})-(\d{2})$/', $data['start_date'], $parts) == false) 
    {
        $out = array('status' => 'error', 'msg' => "Start date must be in yyyy-mm-dd format");
        return $out;
    }
    $date = strtotime($data['start_date']." 23:59:59");
    if ($date < time() )
    {
        $out = array('status' => 'error', 'msg' => "Start date must be greater than today");
        return $out;
    }
    $cid = db_query("select c_id from dh_center where c_subdomain='".addslashes($data['centre'])."'")->fetchField();
    if (!$cid)
    {
        $out = array('status' => 'error', 'msg' => "Invalid centre ".$data['centre']);
        return $out;        
    }

    return _api_sms_keyword_transfer($data['phone'], $data['centre'], $data['start_date'], $data['appid']);    
}

function _api_sms_keyword_transfer($phone, $centre, $start_date, $id)
{
    $phone = addslashes($phone);
    $count_q = "select count(a_id) from dh_applicant left join dh_course on (a_course=c_id) 
      where date_format(c_start, '%Y%m%d') >= ".date("Ymd")." and CONCAT(a_mob_country,a_phone_mobile)='$phone'";

    $q = "select a_id, a_status, CONCAT(a_f_name, ' ', a_l_name) as 'name', a_conf_no, a_gender, a_old, a_type, c_name, c_course_type  from dh_applicant 
      left join dh_course on (a_course=c_id) 
      where date_format(c_start, '%Y%m%d') >= ".date("Ymd")." and CONCAT(a_mob_country,a_phone_mobile)='$phone'";
    if ($id <> '')
    {
        $id = addslashes($id);
        $q .= " and a_id='$id'";
        $count_q .= " and a_id='$id'";
    }
    $records = db_query($count_q)->fetchField();
    $out = '';

    if ( $records == 0 )
        return "No applications found for this phone number";        
    elseif ($records > 1)
    {
        $res = db_query($q);
        while($r = $res->fetchAssoc())
        {
          $out .= "AppID: ".$r['a_id']."\n".$r['c_name']."\n".$r['name']." - ".$r['a_status'];
          if ($r['a_conf_no'] <> '')
              $out .= " (".$r['a_conf_no'].")";            
          $out .= "\n\n";
        }
        $out = "Multiple applications found for this phone number\n\n".$out."\nSend TRANSFER $centre $start_date AppID";
    }
    else
    {
        $res = db_query($q);
        $r = $res->fetchAssoc();

        $q = "select co.c_id, co.c_center, co.c_name from dh_course co left join dh_center c on co.c_center=c.c_id where 
          c_subdomain='$centre' and c_start='$start_date' and c_course_type='".$r['c_course_type']."' limit 1";
        $new_course = db_query($q)->fetchAssoc();
        if ( $new_course['c_id'] == '' )
        {
            $out = "No course found for centre $centre for date $start_date with same course type";
            return $out;
        }
        $q = "select c_status, c_status_nf, c_status_nm, c_status_om, c_status_of, c_status_svr_f, c_status_svr_m from 
          dh_course where c_id=".$new_course['c_id'];
        $check = db_query($q)->fetchAssoc();

        $sevak = (strtolower($r['a_type']) == 'sevak' )?1:0;
        $old = $r['a_old']?'o':'n';
        $gender = strtolower($r['a_gender']);
        if ( $sevak )
          $field = 'c_status_svr_'.$gender;
        else
          $field = 'c_status_'.$old.$gender;
        $FULL_STATUS = array('full', 'course full', 'closed');

        if (in_array(strtolower($check[$field]), $FULL_STATUS) || in_array(strtolower($check['c_status']), $FULL_STATUS) )
        {
            $out = "Unable to transfer to ".$new_course['c_name']." as either course status is FULL/Closed";
            return $out;
        }
        $q = "update dh_applicant set a_center='".$new_course['c_center']."', a_course='".$new_course['c_id']."' where a_id='".$r['a_id']."'";
        db_query($q);
        $msg = 'Re-Applied from '.$r['c_name']." (".$r['a_status'].") ";
        logit($new_course['c_id'], 'Status Change', $r['a_id'], $msg );

               
        $out = "Application Id ".$r['a_id']." transferred to ".$new_course['c_name']." successfully";
        $cmd = "/usr/bin/php status-trigger.php ".$r['a_id']." 'Received'";
        exec($cmd);

    }

    return $out;
}



function _api_sms_keyword_patrika($pid, $pincode)
{
    $pid = addslashes($pid);
    $pincode = addslashes($pincode);

    $q = "select p_mode, CONCAT(p_f_name, ' ', p_l_name) as 'name', p_address, p_zip, l_name, p_subscription_type, DATE_FORMAT(p_end_date, '%d/%m/%Y')  as 'p_end_date', p_cancelled
      from dh_patrika left join dh_languages on p_language=l_code where p_vray_id='$pid' and p_zip='$pincode'";
    $res = db_query($q);

    $out = '';
    while($r = $res->fetchAssoc())
    {
        $out = "Name: ".$r['name']."\nMode: ".$r['p_mode']."\nLang: ".$r['l_name']."\nSub Type: ".$r['p_subscription_type']."\n";

        if ($r['p_cancelled'])
            $out .= "Status: Cancelled";
        else
            $out .= "Subcr End: ".$r['p_end_date'];
    }

    if ($out == '')
        return "No patrika subcriptions found for given subscriber id and pincode";

    return $out;    
}


function send_sms($to , $message, $country = '91')
{
      //$result = send_sms_textlocal($to, $message );
      //$result = json_decode($result);    
      /*if (  $result->response->status != 'success' )
        watchdog('SMS', 'Failure Sending SMS - '.nl2br($message).' - '. print_r($result, true));
      */
      /*
      if (  $result->status == 'failure' )
        watchdog('SMS', 'Failure Sending SMS - '.nl2br($message).' - '. print_r($result, true));
      */
        switch ($country) 
        {
            case '91':
                $to_temp = substr($to, -10);
                $result = send_sms_rudra($to_temp, $message);
                if (! strstr($result, "Message Submitted Successfully"))
                {
                    watchdog('SMS', 'Failure Sending SMS - '.nl2br($message).' - '. $result);  
                }
                break;
            case '27':
                $result = sms_sa_send_sms($to, $message);
                break;
            default:
                log_app("send_sms: No handler to send to ".$to." (".$country.")"." -> ".$message);
                break;
        }

}

function send_sms_textlocal( $to, $message )
{
    $username = "vinay@vinay.in";
    $hash = "857914009c9f2753425437e54d736058714b9d029aa9c51179d8a31d265a83ed";
    $sender = "DHAMMA";
    $message =  str_replace("\n", '%n',  $message) ;
    //$data = "username=".$username."&hash=".$hash."&message=".$message."&sender=".$sender."&numbers=".$to;
    $data = array("username" => $username , "hash" => $hash, "numbers" => $to, "sender" => $sender, "message" => $message);
    $ch = curl_init('http://api.textlocal.in/send/');
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $result = curl_exec($ch); // This is the result from the API
    curl_close($ch);
    return $result;
}


function send_sms_bhash( $to, $message )
{
    $sms_url = variable_get('sms_url', '');

    $sms_url = str_replace(array('%phone', '%data'), array($to, urlencode($message)), $sms_url );
    $result = file_get_contents($sms_url);
   // watchdog("SMS", $sms_url);
    return $result;
}


function send_sms_rudra($to, $message )
{
    $sms_url = variable_get('sms_api_url', '');

    $sms_url = str_replace(array('%phone', '%data'), array($to, urlencode($message)), $sms_url );
    $result = file_get_contents($sms_url);
   // watchdog("SMS", $sms_url);
    return $result;
}

function _ivr_log( $from, $action, $params, $response )
{
    $rec['il_from'] = $from;
    $rec['il_action'] = $action;
    $rec['il_params'] = $params;
    $rec['il_response'] = $response;
    db_insert('dh_ivr_log')->fields($rec)->execute();
}


function _api_get_apps_status( $phone, $country_code = '91' )
{
    $phone = addslashes($phone);
    $limit = 10;
    if ($country_code == '')
    {
      $country_code = '91';
      $limit = 3;
    }
    $q = "select a_id as 'ID', a_status as 'Status', CONCAT(a_f_name, ' ', a_l_name) as 'Name', a_conf_no as 'ConfNo', 
      c_start as 'StartDate', c.c_subdomain as 'Center', td.td_val1 as 'CourseType', c.c_phone as CentreNum from dh_applicant 
      left join dh_course co on (a_course=co.c_id) left join dh_center c on (co.c_center=c.c_id) 
      left join dh_type_detail td on (co.c_course_type=td.td_id) 
      where date_format(c_start, '%Y%m%d') >= ".date("Ymd")." and a_phone_mobile='$phone' and a_mob_country='$country_code' order by c_start limit $limit";
    $res = db_query($q);

    $rows = array();
    $out = '';
    while($r = $res->fetchAssoc())
    {
        $rows[] = $r;
        $out = $r['Center']." / ".$r['CourseType']." / ".$r['StartDate']."\n".$r['Name']." - ".$r['Status'];
        if ($r['ConfNo'] <> '')
            $out .= " (".$r['ConfNo'].")";
        $out .= "\n";
    }
    _ivr_log($phone, "course", "info", $out );
    return $rows;    
}

function _api_confirm_app($phone, $appid)
{
    $phone = addslashes($phone);
    $appid = addslashes($appid);

    $q = "select a_id as 'ID', a_status as 'Status', CONCAT(a_f_name, ' ', a_l_name) as 'Name', a_conf_no as 'ConfNo', 
      c_start as 'StartDate', c.c_subdomain as 'Center', td.td_val1 as 'CourseType' from dh_applicant 
      left join dh_course co on (a_course=co.c_id) left join dh_center c on (co.c_center=c.c_id) 
      left join dh_type_detail td on (co.c_course_type=td.td_id) 
      where a_id='$appid' and date_format(c_start, '%Y%m%d') >= ".date("Ymd")." and a_phone_mobile='$phone' and a_status IN ('PreConfirmation','ReConfirmation')";
    watchdog('dipi_api', $q, array(), WATCHDOG_NOTICE, 'link');
    $res = db_query($q);
    if ($res->rowCount() <= 0 )
    {
       $ret = array('status' => 'error', 'msg' => "No Application found with App id $appid, mobile $phone and status in PreConfirmation/ReConfirmation");
       return $ret;
    }
    $r = $res->fetchAssoc();
    if ($r['Status'] == 'PreConfirmation')
    {
      $out = "Application Id ".$r['ID']." for ".$r['Name']." confirmed successfully";
      $cmd = "/usr/bin/php status-trigger.php ".$r['ID']." 'Confirmed'";
    }
    else
    {
      $out = "Application Id ".$r['ID']." for ".$r['Name']." reconfirmed successfully";
      $cmd = "/usr/bin/php status-trigger.php ".$r['ID']." 'Expected'";
    }
    exec($cmd);
    _ivr_log($phone, "course", "confirm", $out );
    $q = "select a_id as 'ID', a_status as 'Status', CONCAT(a_f_name, ' ', a_l_name) as 'Name', a_conf_no as 'ConfNo', 
      c_start as 'StartDate', c.c_subdomain as 'Center', td.td_val1 as 'CourseType' from dh_applicant 
      left join dh_course co on (a_course=co.c_id) left join dh_center c on (co.c_center=c.c_id) 
      left join dh_type_detail td on (co.c_course_type=td.td_id) 
      where a_id='$appid'";
    $res = db_query($q);
    $rows = array();
    $r = $res->fetchAssoc();
    $rows[] = $r;
    return $rows;    
}


function _api_cancel_app($phone, $appid)
{
    $phone = addslashes($phone);
    $appid = addslashes($appid);
    $q = "select a_id, a_status, CONCAT(a_f_name, ' ', a_l_name) as 'name', a_conf_no, c_name  from dh_applicant 
      left join dh_course on (a_course=c_id) 
      where a_id='$appid' and date_format(c_start, '%Y%m%d') >= ".date("Ymd")." and a_phone_mobile='$phone'";

    $res = db_query($q);
    $r = $res->fetchAssoc();

    $out = "Application Id ".$r['a_id']." for ".$r['c_name']." cancelled successfully";
    $cmd = "/usr/bin/php status-trigger.php ".$r['a_id']." 'Cancelled'";
    exec($cmd);
    _ivr_log($phone, "course", "cancel", $out );
    return $out;
}


function _api_transfer_app($phone, $appid)
{
    $phone = addslashes($phone);
    $appid = addslashes($appid);
    $out = "Send 'TRANSFER <centre> <YYYY-mm-dd> $appid' to 9293792937";
    send_sms($phone, $out);
    _ivr_log($phone, "course", "transfer", $out);
    return array();
}

function _api_countries_get( $lastupdated )
{
    if (!$lastupdated)
      return array('Error' => 'Invalid hours');

    $last = date("YmdHi", strtotime("-$lastupdated hours"));
    $q = "select c.c_code as 'ISOCode', c.c_name as 'Name' from dh_country c where date_format(c_last_updated, '%Y%m%d%H%i') > $last order by c.c_name";
    $res = db_query($q);
    $rows = array( 'Last Updated' => $last);
    while( $row = $res->fetchAssoc() )
      $rows[] = $row;

    return $rows;
}

function _api_states_get( $lastupdated )
{
    if (!$lastupdated)
      return array('Error' => 'Invalid hours');

    $last = date("YmdHi", strtotime("-$lastupdated hours"));
    $q = "select s_country as 'CountryISOCode', s_code as 'ISOCode', s_name as 'Name' from dh_state 
      where date_format(s_last_updated, '%Y%m%d%H%i') > $last order by s_name";
    $res = db_query($q);
    $rows = array( 'Last Updated' => $last);
    while( $row = $res->fetchAssoc() )
      $rows[] = $row;

    return $rows;
}

function _api_cities_get( $lastupdated )
{
    if (!$lastupdated)
      return array('Error' => 'Invalid hours');

    $last = date("YmdHi", strtotime("-$lastupdated hours"));
    $q = "select c_country as 'CountryISOCode', c_state as 'StateISOCode', c_name as 'Name', c_id as 'CityID' from dh_city 
      where date_format(c_last_updated, '%Y%m%d%H%i') > $last and c_name <> '' order by c_name";
    $res = db_query($q);
    $rows = array( 'Last Updated' => $last);
    while( $row = $res->fetchAssoc() )
      $rows[] = $row;

    return $rows;
}


function _api_application_status($appid)
{
    if (!$appid)
      return array('Error' => 'Invalid AppID');

    $q = "select a_id as 'ID', a_status as 'Status', CONCAT(a_f_name, ' ', a_l_name) as 'Name', a_conf_no as 'ConfNo', c_name as 'CourseName'  from dh_applicant left join dh_course on (a_course=c_id) where  a_id in ($appid)";
    $res = db_query($q);

    $rows = array();
    while($r = $res->fetchAssoc())
    {
      $rows[] = $r;
    }
    if (empty($rows))
      $rows = array('Error' => 'AppID Not Found' );
    return $rows;
}


function _api_teachers_get( $lastupdated )
{
    if (!$lastupdated)
      return array('Error' => 'Invalid hours');

    $last = date("YmdHi", strtotime("-$lastupdated hours"));
    $q = "select t_id as 'ID', t_code as 'ATCode',  CONCAT(t_f_name, ' ', t_l_name) as 'Name', t_email as 'Email', 
       t_mob_phone as 'PhoneMobile', t_unique_code as 'UniqueCode', t_sat as 'SAT', t_ct as 'CT', t_full_t as 'FullT', t_cat as 'CAT', 
       t_bhante as 'Bhante', t_responsibility as 'Responsibility', t_current_status as 'CurrentStatus',
       t_status as 'Status', t_gender as 'Gender', t_year_appointed as 'YearAppointed'
        from dh_teacher where date_format(t_updated, '%Y%m%d%H%i') > $last and t_f_name <> '' order by t_f_name, t_l_name";
    $res = db_query($q);
    $rows = array( 'Last Updated' => $last);
    while( $row = $res->fetchAssoc() )
      $rows[] = $row;

    return $rows;   
}

function sms_sa_get_token()
{
   Requests::register_autoloader();
   $time = time();   
   $expiry = variable_get('sms_sa_token_expiry', 0);
   if (($time - $expiry) < 100 )
   {
      return variable_get('sms_sa_token', '');
   }
   $options = array( 'auth' => array( variable_get('sms_sa_client_id', ''),  variable_get('sms_sa_secret','')) );
   $headers = array('Content-Type' => 'application/json');
   $req = Requests::get(variable_get('sms_sa_url', '')."/Authentication", $headers, $options);
   watchdog('SA-SMS', 'Token response'.$req->body);  
   $json = json_decode($req->body);
   $token = $json->token;
   variable_set('sms_sa_token', $token);
   variable_set('sms_sa_token_expiry', $time + 1440 * 60 );
   //watchdog('dipi_api', var_dump($req->body) , array(), WATCHDOG_NOTICE);
   return $token;
}

function sms_sa_send_sms($to, $message)
{
   $return = 0;
   $token = sms_sa_get_token();
   $headers = array('Content-Type' => 'application/json', 'Accept' => 'application/json',  
      'Authorization' => 'Bearer '.$token);   
   $data = array('Messages' => array( array('Content' => $message, 'Destination' => $to ) ));
   $data = json_encode($data);
   $req = Requests::post(variable_get('sms_sa_url', '')."/bulkmessages", $headers, $data);
   if ($req->status_code == 200)
   {
      $ret = json_decode($req->body);
      $return = $ret->eventId;
      watchdog('SA-SMS', 'SMS ID '.$ret->eventId);
   }
   else
   {
      watchdog('SA-SMS', 'Failure Sending SMS - '.nl2br($message).' - '. $req->body);  
   }
   return $return;
}

function _get_apps_for_at( $at_code, $gender, $type )
{
    if (!$at_code)
        return array('Error' => 'No AT Code');
    if (! in_array ( strtoupper( $gender ), array('M', 'F')) )
        return array('Error' => 'No/Invalid Gender');
    $q = "select CONCAT(t_f_name, ' ', t_l_name) from dh_teacher where t_code = '$at_code' and t_gender = '$gender' limit 1";
    $at_name = db_query($q)->fetchField();
    if ($at_name == '')
        return array('Error' => 'Invalid AT Code');

    $append = '';
    $limit = 'limit 300';
    if ($type == 'current')
    {
        $append = '<= 0';
        $limit = '';
    }
    else
        $append = '> 0';

    $where = "(al.al_recommending = :frname or al.al_area_at = :faname )";
    $where_opts = array( ':frname' => $at_name, ':faname' => $at_name );

    $q = "select CONCAT(a_f_name, ' ', a_l_name) as 'Student Name', a_email as 'Email', a_phone_mobile, a_gender as 'Gender', a_type as 'Sit/Serve', co.c_name as 'Country', s.s_name as 'State',  cr.c_name as 'CourseName', DATE_FORMAT(cr.c_start, '%d %b') as 'CourseStart', DATE_FORMAT(cr.c_end, '%d %b, %Y') as 'CourseEnd', td.td_val1 as 'CourseType', ce.c_name as 'Centre', al.al_recommending_approved as 'RecommendingAtApproved', al.al_area_at_approved as 'AreaAtApproved', DATEDIFF(CURDATE(), cr.c_start) as 'Diff',a_id as 'AppID', al_recommending as 'RecommendingAT', al_area_at as 'AreaAT'
        from dh_applicant_lc al left join dh_applicant a on (al.al_applicant=a.a_id) left join dh_country co on a.a_country=co.c_code left join dh_state s on (a.a_country=s.s_country and a.a_state=s.s_code) left join dh_center ce on (a.a_center=ce.c_id) left join dh_course cr on a.a_course=cr.c_id left join dh_type_detail td on cr.c_course_type=td.td_id where $where
          and td.td_val3 = 'LC' and DATEDIFF(CURDATE(), cr.c_start) $append  order by a_created desc $limit";
    $res = db_query($q, $where_opts);
    $rows = array();
    $c = 0;
    while( $row = $res->fetchAssoc() )
    {
      $rows[] = $row;
      $c++;
    }


    $all_rows = array('count' => $c);
    $all_rows['data'] = $rows;
    return $all_rows;
}


function _get_current_apps_for_at( $at_code, $gender )
{
    return _get_apps_for_at( $at_code, $gender, 'current' );
}

function _get_completed_apps_for_at( $at_code, $gender )
{
    return _get_apps_for_at( $at_code, $gender, 'completed' );
}

function _get_app_detail( $appid )
{
    if (!$appid)
        return array('Error' => 'No App Id');
    if (! is_numeric($appid))
        return array('Error' => 'Invalid App Id');

    $q = "select a.a_id as 'AppID', c.c_id as 'CentreID', c.c_name as 'Centre', co.c_id as 'CourseID', co.c_name as 'Course',td.td_val1 as 'CourseType', co.c_start as 'CourseStartDate', co.c_end as 'CourseEndDate', a.a_type as 'AppType', CONCAT(a.a_f_name, ' ', a.a_l_name) as 'Name', a.a_address as 'Address', IF(a.a_city is null, a.a_city_str, ci.c_name) as 'City', st.s_name as 'State', cy.c_name as 'Country', a.a_zip as 'Zipcode', a.a_email as 'Email', a.a_gender as 'Gender', CONCAT('(', a.a_mob_country, ')', a.a_phone_mobile) as 'Mobile', a.a_phone_home as 'PhoneHome', a.a_phone_office as 'PhoneOffice',a.a_phone_fax as 'FaxNumber',  a.a_dob as 'DOB', a.a_education as 'Education', a.a_occupation as 'Occupation', a.a_company as 'Company', a.a_department as 'Department', a.a_designation as 'Designation', a.a_lang_1 as 'Lang1', a.a_lang_2 as 'Lang2', a.a_lang_3 as 'Lang3', a.a_lang_1_level as 'Lang1Level', a.a_lang_2_level as 'Lang2Level', a.a_lang_3_level as 'Lang3Level', a.a_langs as 'Langs', a.a_lang_discourse as 'LangDiscourse', a.a_lang_discourse_level as 'LangDiscourseLevel', a.a_emergency_name as 'EmergencyName', a.a_emergency_relation as 'EmergencyRelation', a.a_emergency_num as 'EmergencyNum', a.a_photo as 'Photo', a.a_passport as 'Passport', a.a_voter_id as 'VoterID', a.a_pancard as 'Pancard', a.a_aadhar as 'Aadhar', a.a_problem_physical as 'Physical', ae.ae_desc_physical as 'DescPhysical', a.a_problem_mental as 'Mental', ae.ae_desc_mental as 'DescMental', a.a_addiction_past as 'AddictionPast', ae.ae_desc_addiction_past as 'DescAddictionPast', a.a_addiction_current as 'AddictionCurrent', ae.ae_desc_addiction_current as 'DescAddictionCurrent', a.a_other_technique as 'OtherTechnique', a.a_other_technique_old as 'OtherTechniqueOld', a.a_age as 'Age', a.a_teach_others as 'TeachOthers', a.a_medication as 'Medication', a.a_friend_family as 'FriendFamily', a.a_friend_family_details as 'FriendFamilyDetails', a.a_willing_to_serve as 'WillingServe', a.a_willing_to_help as 'WillingHelp', a.a_old as 'Old', a.a_referral as 'Referral', a.a_monk as 'Monk', a.a_extra as 'Extra', ae.ae_desc_other_technique as 'DescOtherTechnique', ae.ae_desc_other_technique_old as 'OtherTechniqueOld', ae.ae_desc_medication as 'DescMedication', ae.ae_teach_other_details as 'TeachOtherDetails', ae.ae_desc_special_requirement as 'DescSpecialRequirement', ae.ae_seva_details as 'SevaDetails', ae.ae_pregnant as 'Pregnant', ae.ae_pregnant_detail as 'PregnantDetail', al.al_lang_discourse as 'LangDiscourse', al.al_at_year as 'ATYear', al.al_committed as 'Committed', al.al_exclusive_2yrs as 'Exclusive2Yrs', al.al_daily_practice_yrs as 'DailyPracticeYrs', al.al_daily_practice_details as 'DailyPracticeDetails', al.al_5_precepts as '5Precepts', al.al_intoxicants as 'Intoxicants', al.al_sexual_misconduct as 'SexualMisconduct', al.al_recent_sat_type as 'RecentCourseType', al.al_last_lc_type as 'LastLcType', al.al_last_lc_date as 'LastLcDate', al.al_last_lc_location as 'LastLcLocation', al.al_last_lc_teacher as 'LastLcTeacher', al.al_served_other as 'ServedOther', al.al_relationship as 'InRelation', al.al_relationship_lifelong as 'RelationLifelong', al.al_spouse_name as 'SpouseName', al.al_relation_harmonious as 'RelationHarmonious', al.al_spouse_approve as 'SpouseApprove', al.al_spouse_meditator as 'SpouseMeditator', al.al_spouse_other_technique as 'SpouseOtherTechnique', al.al_left_course as 'LeftCourse', al.al_left_course_details as 'LeftCourseDetails', al.al_reduce_practice as 'ReducePractice', al.al_reduce_practice_details as 'ReducePracticeDetails', al.al_personal_tragedy as 'PersonalTragedy', al.al_personal_tragedy_details as 'PersonalTragedyDetails', al.al_difficulty as 'Difficulty', al.al_difficulty_details as 'DifficultyDetails', al.al_special_req as 'SpecialReq', al.al_special_req_details as 'SpecialReqDetails', al.al_additional_info as 'AdditionalInfo', al.al_arrival as 'Arrival', al.al_recommending as 'RecommendingAT', al.al_recommending_comments as 'RecommendingComments', al.al_area_at as 'AreaAT', al.al_area_at_comments as 'AreaAtComments', al.al_recommending_approved as 'RecommendingAtApproved', al.al_area_at_approved as 'AreaAtApproved', ac.ac_teen as 'TeenCo', ac.ac_10d as '10DCo', ac.ac_stp as 'STPCo', ac.ac_spl as '10DSpCo', ac.ac_20d as '20DCo', ac.ac_30d as '30DCo', ac.ac_45d as '45DCo', ac.ac_60d as '60DCo', ac.ac_tsc as 'TSCo', ac.ac_teacher as 'Teacher', ac.ac_teacher_code as 'TeacherCode', ac.ac_service as '10DayServed', ac.ac_practice as 'Practice', ac.ac_practice_details as 'PracticeDetails', CONCAT(ac.ac_first_day, '-', ac.ac_first_month, '-', ac.ac_first_year) as 'FirstCoDate', CONCAT(ac.ac_last_day, '-', ac.ac_last_month, '-', ac.ac_last_year) as 'LastCoDate', ac.ac_first_location_str as 'FirstCoLoc', ac.ac_first_teacher_str as 'FirstCoTeacher', ac.ac_last_location_str as 'LastCoLoc', ac.ac_last_teacher_str as 'LastCoTeacher' from dh_applicant a left join dh_applicant_extra ae on (a.a_id=ae.ae_applicant) left join dh_applicant_lc al on (a.a_id=al.al_applicant) left join dh_applicant_course ac on (a.a_id=ac.ac_applicant) left join dh_center c on (a.a_center=c.c_id) left join dh_course co on (a.a_course=co.c_id) left join dh_city ci on (a.a_city=ci.c_id) left join dh_state st on (a.a_state=st.s_code AND a.a_country=st.s_country) left join dh_country cy on (a.a_country=cy.c_code) left join dh_type_detail td on (co.c_course_type=td.td_id) where a_id = $appid";
    $res = db_query($q);
    $row = $res->fetchAssoc();

    if (!$row)
        return  array('Error' => 'Invalid App Id');

    $ret = s3_get_file( variable_get('s3_bucket_name', '') , str_replace("private://", '', $row['Photo']), 'stream' );
    if (!$ret['success'])
        watchdog('S3Photo', "Dipi API ".$ret['messsage']);
    $row['Photo'] = base64_encode($ret['data']);
    return $row;
}


function _process_lc_application( $appid, $data)
{
    if (!$appid)
        return array('Error' => 'No App Id');
    if (! is_numeric($appid))
        return array('Error' => 'Invalid App Id');

    if (! in_array($data['status'], array('Approved', 'Rejected', 'Transfer to Registrar')))
        return array('Error' => 'Invalid Status');

    if (! in_array($data['gender'], array('M', 'F')))
        return array('Error' => 'Invalid AT Gender');


    if (($data['status'] == 'Rejected'  ) && ($data['comment'] == ''))
        return array('Error' => 'Comment is required');        

    if ($data['comment'] <> '')
        if (strlen($data['comment']) > 250)
            return array('Error' => 'Comment must be less than 250 chars');

    $q = "select *, DATEDIFF(CURDATE(), co.c_start) as 'diff' from dh_applicant a left join dh_applicant_lc al on (a.a_id=al.al_applicant) left join dh_applicant_course ac on (a.a_id=ac.ac_applicant) left join dh_center c on (a.a_center=c.c_id) left join dh_course co on (a.a_course=co.c_id) left join dh_type_detail td on co.c_course_type=td.td_id where a_id= $appid";
    $res = db_query($q);
    $row = $res->fetchAssoc();
    if (!$row)
        return  array('Error' => 'Invalid App Id');

    if ($row['diff'] > 0)
        return  array('Error' => 'Course is already started'); 

    if ($row['td_val3'] <> 'LC')
        return  array('Error' => 'App Id is not a LC application');        

    if (! in_array($row['a_status'], array('R-ATReview', 'A-ATReview')) )
        return  array('Error' => 'App Id is not in R-ATReview, A-ATReview');                

    $q = "select CONCAT(t_f_name, ' ', t_l_name) as 'name', t_cat, t_full_t from dh_teacher where t_code = '".$data['at_code']."' and t_gender = '".$data['gender']."' limit 1";
    $row_at = db_query($q)->fetchAssoc();
    $is_cat = 0;
    $at_name='';
    if ($row_at)
    {
        if ($row_at['name'] == '')
            return array('Error' => 'Invalid AT Code');
        if ($row_at['t_cat'] || $row_at['t_full_t'])
            $is_cat = 1;
        $at_name = $row_at['name'];      
    }
    else
    {
      return array('Error' => 'Invalid AT Code');
    }

    $action = "";
    $type = '';
    if ($row['a_status'] == 'R-ATReview')
    {
        $action= 'reco';
        $type = 'al_recommending';
    }
    else
    {
        $action= 'area';
        $type = 'al_area_at';
        if ( $data['status'] == 'Transfer to Registrar')
            return array('Error' => 'Invalid Status');
    }

    if ($at_name <> $row[$type])
        return array('Error' => 'AT '.$at_name." cannot process this application");

    if ($row['a_status'] == 'R-ATReview')
    {
        if ($is_cat)
            $data['teacher_code'] = $data['at_code'].'.'.$data['gender'];
        if ($data['teacher_code'] == '' && $data['status'] == 'Approved')
            return array('Error' => 'Area Teacher code is required');            
    }

    $upd = array();
    $new_status = '';
    if ($action == 'reco')
    {
        $upd['al_recommending_comments'] = $data['comment'];
        $upd['al_recommending_approved'] = $data['status'];
        if ($data['status'] == 'Approved')
        {
            if ($is_cat)
            {
                $upd['al_area_at_comments'] = $data['comment'];
                $upd['al_area_at_approved'] = $data['status'];
            }
            //$upd['al_area_at'] = $data['teacher_code'];

            $gender = substr($data['teacher_code'], -1);
            $t_code = substr($data['teacher_code'], 0, -2);
            $q = "select CONCAT(t_f_name, ' ', t_l_name) from dh_teacher where t_code = '".$t_code."' and t_gender = '".$gender."' and (t_cat = 1 or t_full_t = 1)  limit 1";
            $upd['al_area_at'] = db_query($q)->fetchField();
            if ($upd['al_area_at'] == '')
                return array('Error' => 'Invalid Area Teacher AT Code');

            $new_status = 'A-ATReview';
            if ($is_cat)
                $new_status = 'Received';
        }
        elseif ($data['status'] == 'Rejected')
            $new_status = 'Rejected-R-AT';
        elseif ($data['status'] == 'Transfer to Registrar')
            $new_status = 'R-ATTransfer';

        if ($data['status'] == 'Transfer to Registrar')
        {
            $upd['al_recommending'] = '';
            $upd['al_area_at'] = '';            
        }

        db_update('dh_applicant_lc')->fields($upd)->condition('al_applicant', $appid)->execute();

    }
    elseif ($action == 'area')
    {
        $upd['al_area_at_comments'] = $data['comment'];
        $upd['al_area_at_approved'] = $data['status'];
        db_update('dh_applicant_lc')->fields($upd)->condition('al_applicant', $appid)->execute();
        if ($data['status'] == 'Approved')
            $new_status = 'Received';
        elseif ($data['status'] == 'Rejected')
            $new_status = 'Rejected-A-AT';

    }
    if ($new_status <> '')
    {
        $cmd = "/usr/bin/php status-trigger.php $appid '$new_status'";
        exec($cmd);        
    }

    return array('success' => True);
}


function _app_info_by_conf_num ( $conf_num )
{

    $ret = array(
        'Success'=>'',
        'Message'=>'',
        'FirstName'=>'',
        'LastName'=>'',
        'Email'=>'',
        'City'=>'',
        'Attended'=>'',
    );

    if (!$conf_num)
    {
        $ret['Success'] = False;
        $ret['Message'] = "Confirmation number required.";
        return $ret;
    }

    if (!in_array(strtoupper(substr($conf_num, 0, 2)), array('NM', 'OM', 'SM', 'NF', 'OF', 'SF')))
    {
        $ret['Success'] = False;
        $ret['Message'] = "Confirmation number must have first two characters as 'NM', 'OM', 'SM', 'NF', 'OF' or 'SF'.";
        return $ret;
    }

    if (!(is_int(substr($conf_num, 2)) || ctype_digit(substr($conf_num, 2))))
    {
        $ret['Success'] = False;
        $ret['Message'] = "Confirmation number must be like 'NM21', 'OM2', 'SM42', 'NF2', 'OF1' or 'SF102'.";
        return $ret;
    }

    global $user;
    $user_id = $user->uid;

    try
    {

        $q = "select uc_center from dh_user_center where uc_user=".$user_id." and uc_deleted=0";
        $result = db_query($q);

        if ($result->rowCount()==0 || $result->rowCount() > 1)
        {
            $ret['Success'] = False;
            $ret['Message'] = "Logged in user must be affilated to one center only.";
            return $ret;
        }

        $center_id = $result->fetchField();

        $q = "select c_id from dh_course where c_start=CURDATE() and c_center=".$center_id." order by c_created asc limit 1";
        $result = db_query($q);

        if ($result->rowCount()==0)
        {
            $ret['Success'] = False;
            $ret['Message'] = "Today is not Zero Day for any course.";
            return $ret;
        }

        $course_id = $result->fetchField();

        $q = "select a_f_name, a_l_name, a_email, IF(a_city is null, a_city_str, c_name) as city, a_attended from dh_applicant left join dh_city on (dh_applicant.a_city=dh_city.c_id) where a_course=".$course_id." and a_conf_no=:a_conf_no";
        $result = db_query($q, array(':a_conf_no'=>$conf_num));

        if ($result->rowCount()==0)
        {
            $ret['Success'] = False;
            $ret['Message'] = "There is no applicant with provided confirmation number.";
            return $ret;
        }

        $out = $result->fetchAssoc();


        $ret['FirstName'] = $out['a_f_name'];
        $ret['LastName'] = $out['a_l_name'];
        $ret['Email'] = $out['a_email'];
        $ret['City'] = $out['city'];
        $ret['Attended'] = $out['a_attended'];
        $ret['Success'] = True;

        return $ret;
    }
    catch(Exception $e)
    {
        $ret['Success'] = False;
        $ret['Message'] = "There is some error.";
        return $ret;
    }
}



function _mark_attended_by_conf_num( $conf_num )
{
    $ret = array(
        'Success'=>'',
        'Message'=>'',
    );

    $out = _app_info_by_conf_num ( $conf_num );

    if(!$out['Success'])
    {
        $ret['Success'] = False;
        $ret['Message'] = $out['Message'];
        return $ret;
    }

    if ($out['a_attended']==1)
    {
        $ret['Success'] = False;
        $ret['Message'] = "The applicant is already marked as attended.";
        return $ret;
    }

    try
    {

        db_update('dh_applicant')->fields(array('a_attended'=>1))->condition('a_conf_no', $conf_num)->execute();
        $ret['Success'] = True;
        $ret['Message'] = "The applicant having conf number ".$conf_num." is successfully marked as attended.";
        return $ret;
    }
    catch(Exception $e)
    {
        $ret['Success'] = False;
        $ret['Message'] = "There is some error.";
        return $ret;
    }
}
