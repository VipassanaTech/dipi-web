<?php


/**
 * Implements hook_permission().
 */
function dipi_api_permission() {

    $perms['get all centres'] = array('title' => t('Access all centres') ) ;
    $perms['get all courses'] = array('title' => t('Access all courses') ) ;
    $perms['post application'] = array('title' => t('Post an application to a course') ) ;
    $perms['access sms api'] = array('title' => t('Access SMS API') );

    return $perms;
}

/**
 * Implements hook_services_resources().
 */
function dipi_api_services_resources() {

  $resources = array(
    '#api_version' => '3001',
    'dipi' => array(
        'actions' => array(
            'centres-updated-last-n-hours' => array(
                    'help' => t("Get Centres"),
                    'access arguments' => array('get all centres'),
                'access arguments append' => FALSE,
                    'callback' => '_api_centres_get',
              'args' => array(
                array(
                  'name' => 'lastupdated',
                  'optional' => FALSE,
                  'source' => array('path' => 1),
                  'type' => 'int',
                  'description' => 'Centres updated in last n hours',
                ),
              ),
            ),

        'courses-updated-last-n-hours' => array(
              'help' => t("Get Courses"),
              'access arguments' => array('get all courses'),
              'access arguments append' => FALSE,
              'callback' => '_api_courses_get',
              'args' => array(
                array(
                  'name' => 'centre',
                  'optional' => FALSE,
                  'source' => array('path' => 1),
                  'type' => 'int',
                  'description' => 'CentreID',
                ),
                array(
                  'name' => 'lastupdated',
                  'optional' => FALSE,
                  'source' => array('path' => 2),
                  'type' => 'int',
                  'description' => 'Courses updated in last n hours',
                ),
              ),
        ),

        'post-application' => array(
              'help' => t("Post an application to course"),
              'access arguments' => array('post application'),
              'access arguments append' => FALSE,
              'callback' => '_api_post_application',
              'args' => array(
                array(
                  'name' => 'centre',
                  'optional' => FALSE,
                  'source' => array('path' => 1),
                  'type' => 'int',
                  'description' => 'Centre ID',
                ),
                array(
                  'name' => 'course',
                  'optional' => FALSE,
                  'source' => array('path' => 2),
                  'type' => 'int',
                  'description' => 'Course ID',
                ),
                array(
                  'name' => 'data',
                  'optional' => FALSE,
                  'source' => 'data',
                  'type' => 'string',
                  'description' => 'Base64 Encoded Query string key value pairs',
                ),
              ),
        ),


        'cmd' => array(
              'help' => t("POST an SMS Command"),
              'access arguments' => array('access sms api'),
              'access arguments append' => FALSE,
              'callback' => '_api_handle_sms',
              'args' => array(
                array(
                  'name' => 'params',
                  'optional' => FALSE,
                  'source' => 'data',
                  'type' => 'string',
                  'description' => 'Key value pairs',
                ),
              ),
          ),


        ),
     )
  );

  return $resources;
}


function _api_centres_get( $lastupdated )
{
    if (!$lastupdated)
      return array('Error' => 'Invalid hours');

    $last = date("YmdHi", strtotime("-$lastupdated hours"));
    $q = "select c.c_id as 'CentreID', c.c_name as 'CentreName', c.c_trust as 'TrustName', ci.c_name as 'City', s.s_name as 'State', co.c_name as 'Country', 
      c.c_address as 'Address', c.c_pincode as 'Pincode', c.c_phone as 'Phone', c.c_email as 'Email', c.c_url as 'URL' from dh_center c 
      left join dh_country co on (c.c_country=co.c_code) 
      left join dh_state s on (c.c_country=s.s_country and c.c_state=s.s_code) 
      left join dh_city ci on (c.c_city = ci.c_id) where date_format(c_updated, '%Y%m%d%H%i') > $last order by c.c_name";
    $res = db_query($q);
    $rows = array( 'Last Updated' => $last);
    while( $row = $res->fetchAssoc() )
      $rows[] = $row;

    return $rows;
}




function _api_courses_get( $centre, $lastupdated )
{
    if (!$lastupdated)
      return array('Error' => 'Invalid hours');

    if (!$centre)
      return array('Error' => 'Invalid Centre');

    $last = date("YmdHi", strtotime("-$lastupdated hours"));
    $today = date('Ymd');
    $q = "select co.c_id as 'CourseID', c.c_name as 'CentreName', c.c_id as 'CentreID', td.td_val1 as 'CourseType', co.c_start as 'StartDate', co.c_end as 'EndDate',
    co.c_enrol_date as 'EnrollmentDate', co.c_status_om as 'StatusOldMale', co.c_status_of as 'StatusOldFemale', 
    co.c_status_nm as 'StatusNewMale', co.c_status_nf as 'StatusNewFemale', co.c_status_svr_m as 'StatusServerMale', co.c_status_svr_f as 'StatusServerFemale',    
    co.c_list_only as 'ListOnly', c_comments as 'Comments', c_description as 'Description', c_status as 'CourseStatus' 
    from dh_course co left join dh_center c on co.c_center=c.c_id  
    left join dh_type_detail td on (co.c_course_type=td.td_id) 
    where co.c_center=$centre and date_format(co.c_start, '%Y%m%d') > $today and date_format(co.c_updated, '%Y%m%d%H%i') > $last order by co.c_start";
    $res = db_query($q);
    $rows = array( 'Last Updated' => $last);
    while( $row = $res->fetchAssoc() )
      $rows[] = $row;

    return $rows;
}


function _api_post_application( $centre, $course, $data )
{
    if (!$centre)
      return array( "Result" => "Error", 'Message' => 'Invalid Centre');

    if (!$course)
      return array( "Result" => "Error", "Message" => 'Invalid Course');

    if (!$data)
      return array( "Result" => "Error", "Message" => 'Invalid Data');

    $course_data = db_query("select c_id,c_status_nf,c_status_nm,c_status_of,c_status_om,c_status_svr_f,c_status_svr_m, c_status from 
        dh_course where c_center=$centre and c_id=$course")->fetchAssoc();

    if ( isset($course_data) && ( $course_data['c_id'] <> $course) )
        return array("Result" => "Error", "Message" => "Course or Centre ID Invalid");

    $vals = array();
    parse_str($data['data'], $vals);
    $r = array();

    $check_field = 'c_status_svr_'.strtolower($vals['gender']);
    if ( in_array( strtolower($course_data[$check_field]), array('full', 'course full', 'closed') ) || ( in_array( strtolower($course_data['c_status']), array('closed') ) ) )
        return array("Result" => "Error", "Message" => "Cannot accept applications as status is full/closed");

    if (!isset($vals['fname']) || (strlen($vals['fname']) > 50)  )
      return array("Result" => "Error", "Message" => 'First Name not present or more than 50 chars' );
    $r['a_f_name'] = $vals['fname'];

    if (!isset($vals['lname']) || (strlen($vals['lname']) > 50) )
      return array("Result" => "Error", "Message" => 'Last Name not present or more than 50 chars');
    $r['a_m_name'] = $vals['mname'];

    if (isset($vals['mname']) && (strlen($vals['mname']) > 50) )
      return array("Result" => "Error", "Message" => 'Middle Name more than 50 chars');
    $r['a_l_name'] = $vals['lname'];

    if (!isset($vals['gender']) || (!in_array($vals['gender'], array("M", "F")) ) )
      return array("Result" => "Error", "Message" => 'Gender not present or not "M"/"F" ');
    $r['a_gender'] = $vals['gender'];

    if (!isset($vals['age']) && ( !isset($vals['dob']) ) )
      return array("Result" => "Error", "Message" => 'Age/DOB not present');

    if (isset($vals['age']) && (($vals['age'] < 15) || ($vals['age'] > 95)) )
      return array("Result" => "Error", "Message" => "Age incorrect");
    else
      $r['a_dob'] = date("Y", strtotime("-".$vals['age']." year"))."-01-01";

    if (isset($vals['dob']) && (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/",$vals['dob'])) )
      return array("Result" => "Error", "Message" => "DOB not in yyyy-mm-dd format");
    else
      $r['a_dob'] = $vals['dob'];

    if (!isset($vals['mobile']) || (!preg_match("/^[0-9]{10}$/", $vals['mobile']) ) )
      return array("Result" => "Error", "Message" => 'Mobile not present or more than 10 chars');
    $r['a_phone_mobile'] = $vals['mobile'];

    if (!isset($vals['email']) || ( !filter_var($vals['email'], FILTER_VALIDATE_EMAIL) ) )
      return array("Result" => "Error", "Message" => 'Email not present or not a valid email');
    $r['a_email'] = $vals['email'];

    if (!isset($vals['zip']) )
      return array("Result" => "Error", "Message" => 'Zipcode not present');
    $r['a_zip'] = $vals['zip'];

    if (!isset($vals['country']) || (strlen($vals['country']) > 2 ) )  
      return array("Result" => "Error", "Message" => 'Country not present or not ISO code');
    $r['a_country'] = $vals['country'];

    if (!isset($vals['state']) || (strlen($vals['state']) > 2) )  
      return array("Result" => "Error", "Message" => 'State not present or not ISO code');
    $r['a_state'] = $vals['state'];

    if (!isset($vals['city']) || (strlen($vals['city']) > 100) )  
      return array("Result" => "Error", "Message" => 'City not present or more than 100 chars');
    $r['a_city'] = $vals['city'];

    if (!isset($vals['address']) || ( strlen($vals['address']) > 130 ) )
      return array("Result" => "Error", "Message" => 'Address not present or more than 160 chars');
    $r['a_address'] = $vals['address'];

    if (!isset($vals['education']) || ( strlen($vals['education']) > 25 ) )
      return array("Result" => "Error", "Message" => 'Education not present or more than 25 chars');
    $r['a_education'] = $vals['education'];

    if (!isset($vals['occupation']) || ( strlen($vals['occupation']) > 50 ) )
      return array("Result" => "Error", "Message" => 'Occupation not present or more than 50 chars');
    $r['a_occupation'] = $vals['occupation'];

    if (!isset($vals['designation']) || ( strlen($vals['designation']) > 50 ) )
      return array("Result" => "Error", "Message" => 'Designation not present or more than 50 chars');
    $r['a_designation'] = $vals['designation'];

    if (!isset($vals['company']) || ( strlen($vals['company']) > 50 ) )
      return array("Result" => "Error", "Message" => 'Company not present or more than 50 chars');
    $r['a_company'] = $vals['company'];



    $r['ac_10d'] = $r['ac_stp'] = $r['ac_20d'] = $r['ac_30d'] = $r['ac_45d'] = $r['ac_60d'] = $r['ac_spl'] = $r['ac_tsc'] = $r['ac_service'] = 0;
    if (isset($vals['10d'])  && ((!is_numeric($vals['10d'])) || ($vals['10d'] <= 0)) )
        return array("Result" => "Error", "Message" => "10day courses must be greater than 0");
    if (isset($vals['10d'])) $r['ac_10d'] = $vals['10d'];

    if (isset($vals['stp'])  && (!is_numeric($vals['stp']) ) )
        return array("Result" => "Error", "Message" => "STP courses must be numeric");
    if (isset($vals['stp'])) $r['ac_stp'] = $vals['stp'];

    if (isset($vals['10d_spl'])  && (!is_numeric($vals['10d_spl']) ) )
        return array("Result" => "Error", "Message" => "10D Spl courses must be numeric");
    if (isset($vals['10d_spl'])) $r['ac_spl'] = $vals['10d_spl'];

    if (isset($vals['20d'])  && (!is_numeric($vals['20d']) ) )
        return array("Result" => "Error", "Message" => "20 Day courses must be numeric");
    if (isset($vals['20d'])) $r['ac_20d'] = $vals['20d'];

    if (isset($vals['30d'])  && (!is_numeric($vals['30d']) ) )
        return array("Result" => "Error", "Message" => "30 Day courses must be numeric");
    if (isset($vals['30d'])) $r['ac_30d'] = $vals['30d'];

    if (isset($vals['45d'])  && (!is_numeric($vals['45d']) ) )
        return array("Result" => "Error", "Message" => "45 Day courses must be numeric");
    if (isset($vals['45d'])) $r['ac_45d'] = $vals['45d'];

    if (isset($vals['60d'])  && (!is_numeric($vals['60d']) ) )
        return array("Result" => "Error", "Message" => "60 Day courses must be numeric");
    if (isset($vals['60d'])) $r['ac_60d'] = $vals['60d'];

    if (isset($vals['tsc'])  && (!is_numeric($vals['tsc']) ) )
        return array("Result" => "Error", "Message" => "TSC courses must be numeric");
    if (isset($vals['tsc'])) $r['ac_tsc'] = $vals['tsc'];

    if (isset($vals['service'])  && (!is_numeric($vals['service']) ) )
        return array("Result" => "Error", "Message" => "Service Courses must be numeric");
    if (isset($vals['service'])) $r['ac_service'] = $vals['service'];


    if (!isset($vals['first_course_location']) || ( strlen($vals['first_course_location']) > 100 ) )
      return array("Result" => "Error", "Message" => 'First Course Location not present or more than 100 chars');
    $r['ac_first_location_str'] = $vals['first_course_location'];

    if (!isset($vals['first_course_teacher']) || ( strlen($vals['first_course_teacher']) > 100 ) )
      return array("Result" => "Error", "Message" => 'First Course teacher not present or more than 100 chars');
    $r['ac_first_teacher_str'] = $vals['first_course_teacher'];

    if (!isset($vals['last_course_location']) || ( strlen($vals['last_course_location']) > 100 ) )
      return array("Result" => "Error", "Message" => 'Last Course Location not present or more than 100 chars');
    $r['ac_last_location_str'] = $vals['last_course_location'];

    if (!isset($vals['last_course_teacher']) || ( strlen($vals['last_course_teacher']) > 100 ) )
      return array("Result" => "Error", "Message" => 'Last Course teacher not present or more than 100 chars');
    $r['ac_last_teacher_str'] = $vals['last_course_teacher'];


    if (!isset($vals['first_course_year']) || ( !is_numeric($vals['first_course_year']) ) )
      return array("Result" => "Error", "Message" => 'First Course Year not present or not numeric');
    $r['ac_first_year'] = $vals['first_course_year'];

    if (isset($vals['first_course_month']) && ( !is_numeric($vals['first_course_month']) ) )
      return array("Result" => "Error", "Message" => 'First Course Month not present or not numeric');
    if (isset($vals['first_course_month'])) $r['ac_first_month'] = $vals['first_course_month'];

    if (!isset($vals['last_course_year']) || ( !is_numeric($vals['last_course_year']) ) )
      return array("Result" => "Error", "Message" => 'Last Course Year not present or not numeric');
    $r['ac_last_year'] = $vals['last_course_year'];

    if (isset($vals['last_course_month']) && ( !is_numeric($vals['last_course_month']) ) )
      return array("Result" => "Error", "Message" => 'Last Course Month not present or not numeric');
    if (isset($vals['last_course_month'])) $r['last_first_month'] = $vals['last_course_month'];


    if (!isset($vals['lang1']) || ( strlen($vals['lang1']) > 50 ) )
      return array("Result" => "Error", "Message" => 'Lang1 not present or more than 50 chars');
    $r['a_lang_1'] = $vals['lang1'];

    if (!isset($vals['lang1_level']) || ( strlen($vals['lang1_level']) > 15 ) )
      return array("Result" => "Error", "Message" => 'Lang1 Level not present or more than 15 chars');
    $r['a_lang_1_level'] = $vals['lang1_level'];

    if (!isset($vals['lang2']) || ( strlen($vals['lang2']) > 50 ) )
      return array("Result" => "Error", "Message" => 'Lang2 not present or more than 50 chars');
    $r['a_lang_2'] = $vals['lang2'];

    if (!isset($vals['lang2_level']) || ( strlen($vals['lang2_level']) > 15 ) )
      return array("Result" => "Error", "Message" => 'Lang2 Level not present or more than 15 chars');
    $r['a_lang_2_level'] = $vals['lang2_level'];


    if (!isset($vals['seva_details']) || ( strlen($vals['seva_details']) > 300 ) )
      return array("Result" => "Error", "Message" => 'Seva Detais not present or more than 300 chars');
    if (trim($vals['seva_details']) <> '')
        $r['ae_seva_details'] = $vals['seva_details'];


    if (!isset($vals['mental']) || ( strlen($vals['mental']) > 160 ) )
      return array("Result" => "Error", "Message" => 'Mental not present or more than 160 chars');
    if (trim($vals['mental']) <> '')
    {
        $r['a_problem_mental'] = 1;
        $r['ae_desc_mental'] = $vals['mental'];
    }
    else
        $r['a_problem_mental'] = 0;

    if (!isset($vals['physical']) || ( strlen($vals['physical']) > 160 ) )
      return array("Result" => "Error", "Message" => 'Physical not present or more than 160 chars');
    if (trim($vals['physical']) <> '')
    {
        $r['a_problem_physical'] = 1;
        $r['ae_desc_physical'] = $vals['physical'];
    }
    else
        $r['a_problem_physical'] = 0;

    if (!isset($vals['medication']) || ( strlen($vals['medication']) > 160 ) )
      return array("Result" => "Error", "Message" => 'Medication not present or more than 160 chars');
    if (trim($vals['medication']) <> '')
    {
        $r['a_medication'] = 1;
        $r['ae_desc_medication'] = $vals['medication'];
    }
    else
        $r['a_medication'] = 0;

    if (!isset($vals['intox']) || ( strlen($vals['intox']) > 160 ) )
      return array("Result" => "Error", "Message" => 'Intox not present or more than 160 chars');
    if (trim($vals['intox']) <> '')
    {
        $r['a_addiction_current'] = 1;
        $r['ae_desc_addiction_current'] = $vals['intox'];
    }
    else
        $r['a_addiction_current'] = 0;

    if (!isset($vals['othermeditaion']) || ( strlen($vals['othermeditaion']) > 160 ) )
      return array("Result" => "Error", "Message" => 'Othermeditation not present or more than 160 chars');
    if (trim($vals['othermeditaion']) <> '')
    {
        $r['a_other_technique'] = 1;
        $r['ae_desc_other_technique'] = $vals['othermeditaion'];
    }
    else
        $r['a_other_technique'] = 0;

    $app['a_old'] = 1; // Assuming old student, since first phase is only for seva
    $app['a_type'] = 'Sevak';
    $app['a_status'] =  'Received';
    $app['a_source'] = 'ExtApp';
    $system_uids = db_query("select td_key, td_val1 from dh_type_detail where td_type = 'COURSE-APPLICANT'")->fetchAllKeyed();    
    $app['a_center'] = $centre;
    $app['a_course'] = $course;
    $app['a_created_by'] = $system_uids['COURSE-APPLICANT-UID'];
    $app['a_created'] = date('Y-m-d H:i:s');
    $app['a_updated_by'] = $system_uids['COURSE-APPLICANT-UID'];
    $app['a_updated'] = date('Y-m-d H:i:s');
    $app['a_attended'] = 0;

    foreach ($r as $key => $value) 
    {
        if ( substr($key,0,2) == 'a_')
            $app[$key] = $value;
        if ( substr($key,0,3) == 'ac_')
            $app_ac[$key] = $value;
        if ( substr($key,0,3) == 'ae_')
            $app_ae[$key] = $value;
    }
    if ($app['a_city'] <> '')
    {   
        $q = "select c_id from dh_city where c_country='".$app['a_country']."' and c_state='".$app['a_state']."' and c_name='".$app['a_city']."' limit 1";
        $city_id = db_query($q)->fetchField();
        if ( $city_id <> '')
            $app['a_city'] = $city_id;
        else
        {
            $q = "select ci.c_id from dh_pin_code p left join dh_city ci on p.pc_city=ci.c_id left join 
                dh_state s on (ci.c_state=s.s_code and ci.c_country=s.s_country) left join dh_country co on ci.c_country=co.c_code where 
                pc_pin='".$app['a_zip']."' limit 0,1";
            $city = db_query($q)->fetchField();
            if ($city > 0)
                $app['a_city'] = $city;
            else
            {
                /* We just could not find the city, so lets just add it */
                $f['c_country'] = $app['a_country'];
                $f['c_state'] = $app['a_state'];
                $f['c_name'] = $app['a_city'];
                $city = db_insert('dh_city')->fields($f)->execute();
                $app['a_city'] = $city;
            }
        }
    }

    $app_id = db_insert('dh_applicant')->fields($app)->execute();
    dh_send_letter('applicant', $app_id, $app['a_status'] );
    if ( isset($app_ae) )
    {
        $app_ae['ae_applicant'] = $app_id;
        $app_ae['ae_updated_by'] = $app_ae['ae_created_by'] = $system_uids['COURSE-APPLICANT-UID'];
        $app_ae['ae_updated'] = $app_ae['ae_created'] = date('Y-m-d H:i:s');
        db_insert('dh_applicant_extra')->fields($app_ae)->execute();                
    }

    if (isset($app_ac))
    {
        $app_ac['ac_applicant'] = $app_id;
        $app_ac['ac_updated_by'] = $app_ac['ac_created_by'] = $system_uids['COURSE-APPLICANT-UID'];
        $app_ac['ac_updated'] = $app_ac['ac_created'] = date('Y-m-d H:i:s');        
        db_insert('dh_applicant_course')->fields($app_ac)->execute();               
    }

    $msg = "Application submitted successfully";
    return array("Result" => "Success", "Message" => $msg, 'ID' => $app_id );

}

function _api_sms_keywords()
{
    return array('HELP', 'STATUS', 'CANCEL', 'CONFIRM', 'TRANSFER' , 'ADDRESS',  'CONTACT', 'CENTRES', 'PATRIKA');
}

function _api_handle_sms($params)
{
    //watchdog("SMS", "I got data".print_r($params, true));
    $data = "From: ".$params['inNumber']." Sender: ".$params['sender'].", CMD: ".$params['keyword'];
    $result = ""; $response = '';
    $sender =  substr($params['sender'], -10);
    $temp = explode(" ", $params['content']);
    $keyword = $temp[0];
    $content = trim(str_replace($keyword, "", $params['content']));

    $keywords = _api_sms_keywords();
    if (!in_array( strtoupper($keyword), $keywords ))
    {
        $response = "Unknown Keyword $keyword, try HELP";
        $result = send_sms($sender, $response);
        _sms_log($sender, $keyword, $params['content'], $response);
        return array("Result" => "Bad Keyword $keyword"); //['status']
    }
    switch ( strtoupper($keyword) ) 
    {
      case 'HELP':
        $response = _api_sms_keyword_help();
        break;
      case 'ADDRESS':
        $response = _api_sms_keyword_address( $content ) ;
        break;      
      case 'CONTACT':
        $response = _api_sms_keyword_contact( $content ) ;
        break;              
      case 'CENTRES':
        $response = _api_sms_keyword_centres();
        break;      
      case 'STATUS':
        $response = _api_sms_keyword_status($sender);
        break;
      case 'CANCEL':
        $response = _api_sms_keyword_cancel($sender, $content);
        break;
      case 'CONFIRM':
        $response = _api_sms_keyword_confirm($sender, $content);
        break;
      case 'TRANSFER':
        if (count($temp) < 3)
        {
          $response = "TRANSFER <centre> <YYYY-mm-dd>\nPlease send in above format";
          $result = send_sms($sender, $response);
          _sms_log($sender, $keyword, $params['content'], $response);
          return array("Result" => "Bad format ".$content); //['status']            
        }
        $centre = $temp[1];
        $start_date = $temp[2];
        if (!isset($temp[3]))
            $id = "";
        else
            $id = $temp[3];
        $response = _api_sms_keyword_transfer($sender,  $centre, $start_date, $id );
        break;
      case 'PATRIKA':
        if (count($temp) < 3)
        {
          $response = "PATRIKA <subscriber id> <pincode>\nPlease send in above format";
          $result = send_sms($sender, $response);
          _sms_log($sender, $keyword, $params['content'], $response);
          return array("Result" => "Bad format ".$content); //['status']            
        }
        $pid = $temp[1];
        $pincode = $temp[2];
        $response = _api_sms_keyword_patrika($pid, $pincode);
        break;
      default:
        # code...
        break;
    }
  //  _sms_log($params['inNumber'], $params['keyword'], $params['content'], $response);
 
    _sms_log($sender, $keyword, $content, $response);
    $result = send_sms($sender, $response);        

    return array("Result" => $result); //['status']
}


function _sms_log( $from, $keyword, $content, $response )
{
    $rec['sl_from'] = $from;
    $rec['sl_keyword'] = $keyword;
    $rec['sl_content'] = $content;
    $rec['sl_response'] = $response;
    db_insert('dh_sms_log')->fields($rec)->execute();
}

function _api_sms_keyword_help()
{
    $keywords = _api_sms_keywords();
    return "Keywords: ".implode("\n", $keywords);
}

function _api_sms_keyword_centres()
{
    $q = "select c_subdomain from dh_center order by c_subdomain";
    $res = db_query($q);
    $rows = array();
    while($r = $res->fetchAssoc())
        $rows[] = $r['c_subdomain'];
    return implode("\n", $rows);
}

function _api_sms_keyword_address($subdomain)
{
    $subdomain = addslashes($subdomain);
    $q = "select c.c_address, c.c_pincode,co.c_name as 'Country', s_name as 'State', ci.c_name as 'City' from dh_center c left join dh_country co on (c.c_country=co.c_code) 
      left join dh_state s on (c.c_country=s.s_country and c.c_state=s.s_code) left join dh_city ci on (c.c_city=ci.c_id) 
      where c_subdomain='$subdomain'";
    $res = db_query($q)->fetchAssoc();
    if ($res['c_address'] == '')
        return "Address <centre>. For list of centres, send CENTRES";

    return $res['c_address']."-".$res['c_pincode']."\n".$res['City'].",".$res['State'].",".$res['Country'];
}

function _api_sms_keyword_contact($subdomain)
{
    $subdomain = addslashes($subdomain);
    $q = "select c.c_phone, c_email, c_url  from dh_center c where c_subdomain='$subdomain'";
    $res = db_query($q)->fetchAssoc();
    if ($res['c_phone'] == '')
        return "CONTACT <centre>. For list of centres, send CENTRES";

    return "Phone: ".$res['c_phone']."\nEmail: ".$res['c_email']."\nWeb: ".$res['c_url'];
}


function _api_sms_keyword_status($phone)
{
    $phone = addslashes($phone);
    $q = "select a_status, CONCAT(a_f_name, ' ', a_l_name) as 'name', a_conf_no, c_name  from dh_applicant 
      left join dh_course on (a_course=c_id) 
      where date_format(c_start, '%Y%m%d') >= ".date("Ymd")." and a_phone_mobile='$phone'";
    $res = db_query($q);

    $out = '';
    while($r = $res->fetchAssoc())
    {
        $out = $r['c_name']."\n".$r['name']." - ".$r['a_status'];
        if ($r['a_conf_no'] <> '')
            $out .= " (".$r['a_conf_no'].")";
        $out .= "\n";
    }

    if ($out == '')
        return "No applications found for this phone number";

    return $out;
}


function _api_sms_keyword_cancel($phone, $id)
{
    $phone = addslashes($phone);
    $out = '';
    $count_q = "select count(a_id) from dh_applicant left join dh_course on (a_course=c_id) 
      where date_format(c_start, '%Y%m%d') >= ".date("Ymd")." and a_phone_mobile='$phone'";

    $q = "select a_id, a_status, CONCAT(a_f_name, ' ', a_l_name) as 'name', a_conf_no, c_name  from dh_applicant 
      left join dh_course on (a_course=c_id) 
      where date_format(c_start, '%Y%m%d') >= ".date("Ymd")." and a_phone_mobile='$phone'";

    if ($id <> '')
    {
        $id = addslashes($id);
        $q .= " and a_id='$id'";
        $count_q .= " and a_id='$id'";
    }
    $records = db_query($count_q)->fetchField();

    if ( $records == 0 )
        return "No applications found for this phone number";        
    elseif ($records > 1)
    {
        $res = db_query($q);
        while($r = $res->fetchAssoc())
        {
          $out .= "AppID: ".$r['a_id']."\n".$r['c_name']."\n".$r['name']." - ".$r['a_status'];
          if ($r['a_conf_no'] <> '')
              $out .= " (".$r['a_conf_no'].")";            
          $out .= "\n\n";
        }
        $out = "Multiple applications found for this phone number\n\n".$out."\nSend CANCEL AppID";
    }
    else
    {
        $res = db_query($q);
        $r = $res->fetchAssoc();

        $out = "Application Id ".$r['a_id']." for ".$r['c_name']." cancelled successfully";
        $cmd = "/usr/bin/php status-trigger.php ".$r['a_id']." 'Cancelled'";
        exec($cmd);

    }

    return $out;
}


function _api_sms_keyword_confirm($phone, $id)
{
    $phone = addslashes($phone);
    $count_q = "select count(a_id) from dh_applicant left join dh_course on (a_course=c_id) 
      where date_format(c_start, '%Y%m%d') >= ".date("Ymd")." and a_phone_mobile='$phone' and a_status='PreConfirmation'";

    $q = "select a_id, a_status, CONCAT(a_f_name, ' ', a_l_name) as 'name', a_conf_no, c_name  from dh_applicant 
      left join dh_course on (a_course=c_id) 
      where date_format(c_start, '%Y%m%d') >= ".date("Ymd")." and a_phone_mobile='$phone' and a_status='PreConfirmation'";

    if ($id <> '')
    {
        $id = addslashes($id);
        $q .= " and a_id='$id'";
        $count_q .= " and a_id='$id'";
    }
    $records = db_query($count_q)->fetchField();

    $out = '';

    if ( $records == 0 )
        return "No applications in PreConfirmation status found for this phone number";        
    elseif ($records > 1)
    {
        $res = db_query($q);
        while($r = $res->fetchAssoc())
        {
          $out .= "AppID: ".$r['a_id']."\n".$r['c_name']."\n".$r['name']." - ".$r['a_status'];
          if ($r['a_conf_no'] <> '')
              $out .= " (".$r['a_conf_no'].")"; 
          $out .= "\n\n";

        }
        $out = "Multiple applications found for this phone number\n\n".$out."\nSend CONFIRM AppID";
    }
    else
    {
        $res = db_query($q);
        $r = $res->fetchAssoc();

        $out = "Application Id ".$r['a_id']." for ".$r['c_name']." confirmed successfully";
        $cmd = "/usr/bin/php status-trigger.php ".$r['a_id']." 'Confirmed'";
        exec($cmd);

    }

    return $out;
}


function _api_sms_keyword_transfer($phone, $centre, $start_date, $id)
{
    $phone = addslashes($phone);
    $count_q = "select count(a_id) from dh_applicant left join dh_course on (a_course=c_id) 
      where date_format(c_start, '%Y%m%d') >= ".date("Ymd")." and a_phone_mobile='$phone'";

    $q = "select a_id, a_status, CONCAT(a_f_name, ' ', a_l_name) as 'name', a_conf_no, a_gender, a_old, a_type, c_name, c_course_type  from dh_applicant 
      left join dh_course on (a_course=c_id) 
      where date_format(c_start, '%Y%m%d') >= ".date("Ymd")." and a_phone_mobile='$phone'";
    if ($id <> '')
    {
        $id = addslashes($id);
        $q .= " and a_id='$id'";
        $count_q .= " and a_id='$id'";
    }
    $records = db_query($count_q)->fetchField();
    $out = '';

    if ( $records == 0 )
        return "No applications found for this phone number";        
    elseif ($records > 1)
    {
        $res = db_query($q);
        while($r = $res->fetchAssoc())
        {
          $out .= "AppID: ".$r['a_id']."\n".$r['c_name']."\n".$r['name']." - ".$r['a_status'];
          if ($r['a_conf_no'] <> '')
              $out .= " (".$r['a_conf_no'].")";            
          $out .= "\n\n";
        }
        $out = "Multiple applications found for this phone number\n\n".$out."\nSend TRANSFER $centre $start_date AppID";
    }
    else
    {
        $res = db_query($q);
        $r = $res->fetchAssoc();

        $q = "select co.c_id, co.c_name from dh_course co left join dh_center c on co.c_center=c.c_id where 
          c_subdomain='$centre' and c_start='$start_date' and c_course_type='".$r['c_course_type']."' limit 1";
        $new_course = db_query($q)->fetchAssoc();
        if ( $new_course['c_id'] == '' )
        {
            $out = "No course found for centre $centre for date $start_date with same course type";
            return $out;
        }
        $q = "select c_status, c_status_nf, c_status_nm, c_status_om, c_status_of, c_status_svr_f, c_status_svr_m from 
          dh_course where c_id=".$new_course['c_id'];
        $check = db_query($q)->fetchAssoc();

        $sevak = (strtolower($r['a_type']) == 'sevak' )?1:0;
        $old = $r['a_old']?'o':'n';
        $gender = strtolower($r['a_gender']);
        if ( $sevak )
          $field = 'c_status_svr_'.$gender;
        else
          $field = 'c_status_'.$old.$gender;
        $FULL_STATUS = array('full', 'course full', 'closed');

        if (in_array(strtolower($check[$field]), $FULL_STATUS) || in_array(strtolower($check['c_status']), $FULL_STATUS) )
        {
            $out = "Unable to transfer to ".$new_course['c_name']." as either course status is FULL/Closed";
            return $out;
        }
        $q = "update dh_applicant set a_course='".$new_course['c_id']."' where a_id='".$r['a_id']."'";
        db_query($q);
        $out = "Application Id ".$r['a_id']." transferred to ".$new_course['c_name']." successfully";
        $cmd = "/usr/bin/php status-trigger.php ".$r['a_id']." 'Received'";
        exec($cmd);

    }

    return $out;
}



function _api_sms_keyword_patrika($pid, $pincode)
{
    $pid = addslashes($pid);
    $pincode = addslashes($pincode);

    $q = "select p_mode, CONCAT(p_f_name, ' ', p_l_name) as 'name', p_address, p_zip, l_name, p_subscription_type, DATE_FORMAT(p_end_date, '%d/%m/%Y')  as 'p_end_date', p_cancelled
      from dh_patrika left join dh_languages on p_language=l_code where p_vray_id='$pid' and p_zip='$pincode'";
    $res = db_query($q);

    $out = '';
    while($r = $res->fetchAssoc())
    {
        $out = "Name: ".$r['name']."\nMode: ".$r['p_mode']."\nLang: ".$r['l_name']."\nSub Type: ".$r['p_subscription_type']."\n";

        if ($r['p_cancelled'])
            $out .= "Status: Cancelled";
        else
            $out .= "Subcr End: ".$r['p_end_date'];
    }

    if ($out == '')
        return "No patrika subcriptions found for given subscriber id and pincode";

    return $out;    
}



function send_sms($to , $message)
{
    //$result = send_sms_textlocal($params['inNumber'], "Hi there" );
    //$result = json_decode($result);    
    $result = send_sms_bhash($to, $message);

}

function send_sms_textlocal( $to, $message )
{
    $api_key = "857914009c9f2753425437e54d736058714b9d029aa9c51179d8a31d265a83ed";
    $sender = "DHAMMA";
    $message = urlencode($message);
    $data = "username=".$username."&hash=".$hash."&message=".$message."&sender=".$sender."&numbers=".$to;
    $ch = curl_init('http://api.textlocal.in/send/?');
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $result = curl_exec($ch); // This is the result from the API
    curl_close($ch);
    return $result;
}


function send_sms_bhash( $to, $message )
{
    $sms_url = variable_get('sms_url', '');

    $sms_url = str_replace(array('%phone', '%data'), array($to, urlencode($message)), $sms_url );
    $result = file_get_contents($sms_url);
    watchdog("SMS", $sms_url);
    return $result;
}


